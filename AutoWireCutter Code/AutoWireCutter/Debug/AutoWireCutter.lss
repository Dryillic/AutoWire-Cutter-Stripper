
AutoWireCutter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000eb8  00000f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800136  00800136  00000f82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001253  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c53  00000000  00000000  000022db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000635  00000000  00000000  00002f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000790  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000044a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_11>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	ef 02       	muls	r30, r31
  b6:	0e 03       	fmul	r16, r22
  b8:	0e 03       	fmul	r16, r22
  ba:	0e 03       	fmul	r16, r22
  bc:	0e 03       	fmul	r16, r22
  be:	0e 03       	fmul	r16, r22
  c0:	0e 03       	fmul	r16, r22
  c2:	ef 02       	muls	r30, r31
  c4:	0e 03       	fmul	r16, r22
  c6:	0e 03       	fmul	r16, r22
  c8:	0e 03       	fmul	r16, r22
  ca:	0e 03       	fmul	r16, r22
  cc:	0e 03       	fmul	r16, r22
  ce:	c1 02       	muls	r28, r17
  d0:	cf 02       	muls	r28, r31
  d2:	cf 02       	muls	r28, r31
  d4:	cf 02       	muls	r28, r31
  d6:	cf 02       	muls	r28, r31
  d8:	cf 02       	muls	r28, r31
  da:	cf 02       	muls	r28, r31
  dc:	cf 02       	muls	r28, r31
  de:	cf 02       	muls	r28, r31
  e0:	cf 02       	muls	r28, r31
  e2:	0e 03       	fmul	r16, r22
  e4:	0e 03       	fmul	r16, r22
  e6:	0e 03       	fmul	r16, r22
  e8:	0e 03       	fmul	r16, r22
  ea:	0e 03       	fmul	r16, r22
  ec:	0e 03       	fmul	r16, r22
  ee:	0e 03       	fmul	r16, r22
  f0:	ef 02       	muls	r30, r31
  f2:	ef 02       	muls	r30, r31
  f4:	ef 02       	muls	r30, r31
  f6:	ef 02       	muls	r30, r31

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d8 e0       	ldi	r29, 0x08	; 8
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	11 e0       	ldi	r17, 0x01	; 1
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	e8 eb       	ldi	r30, 0xB8	; 184
 10c:	fe e0       	ldi	r31, 0x0E	; 14
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
 110:	05 90       	lpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a6 33       	cpi	r26, 0x36	; 54
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	a6 e3       	ldi	r26, 0x36	; 54
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a5 35       	cpi	r26, 0x55	; 85
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
 12e:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_Z9printCHARcP6__file>:
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
		PORTD = (1 << PORTD2);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <_Z9printCHARcP6__file+0x4>
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <_ZN5Servo9IntializeEv>:
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	83 e8       	ldi	r24, 0x83	; 131
 150:	84 bd       	out	0x24, r24	; 36
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	48 ec       	ldi	r20, 0xC8	; 200
 15e:	52 e4       	ldi	r21, 0x42	; 66
 160:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <dutyCycle>
 164:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <dutyCycle+0x1>
 168:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <dutyCycle+0x2>
 16c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <dutyCycle+0x3>
 170:	0e 94 10 03 	call	0x620	; 0x620 <__divsf3>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	4f e7       	ldi	r20, 0x7F	; 127
 17a:	53 e4       	ldi	r21, 0x43	; 67
 17c:	0e 94 02 04 	call	0x804	; 0x804 <__mulsf3>
 180:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
 184:	67 bd       	out	0x27, r22	; 39
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	85 bd       	out	0x25, r24	; 37
 18a:	08 95       	ret

0000018c <_ZN7DRV882510InitializeEv>:
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	8e e0       	ldi	r24, 0x0E	; 14
 192:	8a b9       	out	0x0a, r24	; 10
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	80 83       	st	Z, r24
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a8:	78 94       	sei
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <_ZN7DRV88259DirectionEb>:
	}	
}

void DRV8825::Direction(bool directionCont) { //Set Stepper Direction uses PORTD3
	if (directionCont) { //true is counter-clockwise, the direction the wire normally feeds
 1ae:	66 23       	and	r22, r22
 1b0:	31 f0       	breq	.+12     	; 0x1be <_ZN7DRV88259DirectionEb+0x10>
	dir = true;
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	fc 01       	movw	r30, r24
 1b6:	22 83       	std	Z+2, r18	; 0x02
	PORTD = (1 << PORTD3);
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	08 95       	ret
	}
	else { //false is clockwise
	dir = false;
 1be:	fc 01       	movw	r30, r24
 1c0:	12 82       	std	Z+2, r1	; 0x02
	PORTD = (0 << PORTD3);
 1c2:	1b b8       	out	0x0b, r1	; 11
 1c4:	08 95       	ret

000001c6 <_ZN7DRV88259RuntostepEib>:
	}	
}

void DRV8825::Runtostep(int stepCount, bool directionCont) { //200*32 microsteps per revolution meaning 6400 is one revolution
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
 1d8:	8b 01       	movw	r16, r22
	sei();
 1da:	78 94       	sei
	long countcurrent = count;
 1dc:	c0 90 45 01 	lds	r12, 0x0145	; 0x800145 <count>
 1e0:	d0 90 46 01 	lds	r13, 0x0146	; 0x800146 <count+0x1>
 1e4:	e0 90 47 01 	lds	r14, 0x0147	; 0x800147 <count+0x2>
 1e8:	f0 90 48 01 	lds	r15, 0x0148	; 0x800148 <count+0x3>
	this->Direction(directionCont);
 1ec:	64 2f       	mov	r22, r20
 1ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7DRV88259DirectionEb>
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 1f2:	a8 01       	movw	r20, r16
 1f4:	11 0f       	add	r17, r17
 1f6:	66 0b       	sbc	r22, r22
 1f8:	77 0b       	sbc	r23, r23
 1fa:	4c 0d       	add	r20, r12
 1fc:	5d 1d       	adc	r21, r13
 1fe:	6e 1d       	adc	r22, r14
 200:	7f 1d       	adc	r23, r15
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	6f 4f       	sbci	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <count>
 20e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count+0x1>
 212:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <count+0x2>
 216:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <count+0x3>
 21a:	84 17       	cp	r24, r20
 21c:	95 07       	cpc	r25, r21
 21e:	a6 07       	cpc	r26, r22
 220:	b7 07       	cpc	r27, r23
 222:	84 f4       	brge	.+32     	; 0x244 <_ZN7DRV88259RuntostepEib+0x7e>
	TCCR1B = (1 << CS11); //Timer pre-scaler set to div 8
}

void DRV8825::Enable (bool enableCont) { //Enable Stepper Controller uses PORTD2
	if (enableCont) {
		enbl = true;
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	2b 83       	std	Y+3, r18	; 0x03
		PORTD = (0 << PORTD2);
 228:	1b b8       	out	0x0b, r1	; 11

void DRV8825::Runtostep(int stepCount, bool directionCont) { //200*32 microsteps per revolution meaning 6400 is one revolution
	sei();
	long countcurrent = count;
	this->Direction(directionCont);
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 22a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <count>
 22e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count+0x1>
 232:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <count+0x2>
 236:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <count+0x3>
 23a:	84 17       	cp	r24, r20
 23c:	95 07       	cpc	r25, r21
 23e:	a6 07       	cpc	r26, r22
 240:	b7 07       	cpc	r27, r23
 242:	8c f3       	brlt	.-30     	; 0x226 <_ZN7DRV88259RuntostepEib+0x60>
	if (enableCont) {
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
 244:	1b 82       	std	Y+3, r1	; 0x03
		PORTD = (1 << PORTD2);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	8b b9       	out	0x0b, r24	; 11
	this->Direction(directionCont);
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
		this->Enable(true);
	}
	this->Enable(false);
	cli();
 24a:	f8 94       	cli
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	08 95       	ret

0000025e <__vector_11>:

ISR(TIMER1_COMPA_vect) //Runs every 10.5khz
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
	count++; //take care not to overflow. Overflows in about 2 days.
 272:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <count>
 276:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count+0x1>
 27a:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <count+0x2>
 27e:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <count+0x3>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	a1 1d       	adc	r26, r1
 286:	b1 1d       	adc	r27, r1
 288:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <count>
 28c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <count+0x1>
 290:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <count+0x2>
 294:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <count+0x3>
	PORTD ^= (1 << PORTD4); //toggle port d4 for square wave
 298:	9b b1       	in	r25, 0x0b	; 11
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	89 27       	eor	r24, r25
 29e:	8b b9       	out	0x0b, r24	; 11
	if (count > 2000000000) {
 2a0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <count>
 2a4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <count+0x1>
 2a8:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <count+0x2>
 2ac:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <count+0x3>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	94 49       	sbci	r25, 0x94	; 148
 2b4:	a5 43       	sbci	r26, 0x35	; 53
 2b6:	b7 47       	sbci	r27, 0x77	; 119
 2b8:	44 f0       	brlt	.+16     	; 0x2ca <__vector_11+0x6c>
		count = 0;
 2ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <count>
 2be:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <count+0x1>
 2c2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <count+0x2>
 2c6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <count+0x3>
	}
}
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <_Z6keypadv>:
		// Reset counter
		count = 0;
	}
}

unsigned char keypad(void){	// Define the function to return which key is pressed
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	68 97       	sbiw	r28, 0x18	; 24
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;	//which key is pressed?
	unsigned char portb_pin;
	
	unsigned char keypad_column[4] = {7,6,5,4};	//Pins b7, 6, 5, 4 of Port B control keypad columns
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	8a 83       	std	Y+2, r24	; 0x02
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	8b 83       	std	Y+3, r24	; 0x03
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char keypad_row[4] = {3,2,1,0};	// Pins b3, 2, 1, 0 of Port B control keypad rows
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	8d 83       	std	Y+5, r24	; 0x05
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	8e 83       	std	Y+6, r24	; 0x06
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	8f 83       	std	Y+7, r24	; 0x07
 31a:	18 86       	std	Y+8, r1	; 0x08
	unsigned char keypad_array[4][4] ={	//Array contains all
		{'1','2','3','A'},
		{'4','5','6','B'},
		{'7','8','9','C'},
		{'*','0','#','D'}
	};
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	e0 e0       	ldi	r30, 0x00	; 0
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	de 01       	movw	r26, r28
 324:	19 96       	adiw	r26, 0x09	; 9
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	8a 95       	dec	r24
 32c:	e1 f7       	brne	.-8      	; 0x326 <_Z6keypadv+0x48>
 32e:	8e 01       	movw	r16, r28
 330:	0f 5f       	subi	r16, 0xFF	; 255
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	a0 e0       	ldi	r26, 0x00	; 0
 336:	b0 e0       	ldi	r27, 0x00	; 0
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
 338:	cc 24       	eor	r12, r12
 33a:	c3 94       	inc	r12
 33c:	d1 2c       	mov	r13, r1
 33e:	7d 01       	movw	r14, r26
 340:	f8 01       	movw	r30, r16
 342:	c6 01       	movw	r24, r12
 344:	01 90       	ld	r0, Z+
 346:	02 c0       	rjmp	.+4      	; 0x34c <_Z6keypadv+0x6e>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <_Z6keypadv+0x6a>
 350:	8f 01       	movw	r16, r30
 352:	80 95       	com	r24
 354:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9c e9       	ldi	r25, 0x9C	; 156
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <_Z6keypadv+0x7c>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <_Z6keypadv+0x82>
 360:	00 00       	nop
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
 362:	23 b1       	in	r18, 0x03	; 3
		for(row=0; row<4; row++){
			if((portb_pin & (1<<(keypad_row[row])))==0) {
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	c9 01       	movw	r24, r18
 368:	0d 80       	ldd	r0, Y+5	; 0x05
 36a:	02 c0       	rjmp	.+4      	; 0x370 <_Z6keypadv+0x92>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <_Z6keypadv+0x8e>
 374:	bc 01       	movw	r22, r24
 376:	61 70       	andi	r22, 0x01	; 1
 378:	77 27       	eor	r23, r23
 37a:	80 ff       	sbrs	r24, 0
 37c:	0e c0       	rjmp	.+28     	; 0x39a <_Z6keypadv+0xbc>
 37e:	fe 01       	movw	r30, r28
 380:	36 96       	adiw	r30, 0x06	; 6
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	bc 01       	movw	r22, r24
 388:	a9 01       	movw	r20, r18
 38a:	01 90       	ld	r0, Z+
 38c:	02 c0       	rjmp	.+4      	; 0x392 <_Z6keypadv+0xb4>
 38e:	55 95       	asr	r21
 390:	47 95       	ror	r20
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <_Z6keypadv+0xb0>
 396:	40 fd       	sbrc	r20, 0
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <_Z6keypadv+0xda>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
 39a:	ee 0c       	add	r14, r14
 39c:	ff 1c       	adc	r15, r15
 39e:	ee 0c       	add	r14, r14
 3a0:	ff 1c       	adc	r15, r15
 3a2:	e1 e0       	ldi	r30, 0x01	; 1
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	ee 0e       	add	r14, r30
 3ac:	ff 1e       	adc	r15, r31
 3ae:	f7 01       	movw	r30, r14
 3b0:	e6 0f       	add	r30, r22
 3b2:	f7 1f       	adc	r31, r23
 3b4:	80 85       	ldd	r24, Z+8	; 0x08
				return (key);	// return the answer, which key is pressed?
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <_Z6keypadv+0xec>
 3b8:	01 96       	adiw	r24, 0x01	; 1
	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
		for(row=0; row<4; row++){
 3ba:	84 30       	cpi	r24, 0x04	; 4
 3bc:	91 05       	cpc	r25, r1
 3be:	19 f7       	brne	.-58     	; 0x386 <_Z6keypadv+0xa8>
 3c0:	11 96       	adiw	r26, 0x01	; 1
	};
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
 3c2:	a4 30       	cpi	r26, 0x04	; 4
 3c4:	b1 05       	cpc	r27, r1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <_Z6keypadv+0xec>
 3c8:	ba cf       	rjmp	.-140    	; 0x33e <_Z6keypadv+0x60>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
				return (key);	// return the answer, which key is pressed?
			}
		}
	}
}
 3ca:	68 96       	adiw	r28, 0x18	; 24
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	08 95       	ret

000003e8 <main>:
check out http://savannah.nongnu.org/bugs/?36970. Function call moved to Main
for proper scope*/
//FILE uart_str = FDEV_SETUP_STREAM(printCHAR, NULL, _FDEV_SETUP_RW); /* Sets up "printf" */

int main(void)
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	2a 97       	sbiw	r28, 0x0a	; 10
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
	static FILE uart_str;
	fdev_setup_stream(&uart_str,printCHAR,NULL,_FDEV_SETUP_WRITE);
 3fc:	e7 e3       	ldi	r30, 0x37	; 55
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	8b e9       	ldi	r24, 0x9B	; 155
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	91 87       	std	Z+9, r25	; 0x09
 406:	80 87       	std	Z+8, r24	; 0x08
 408:	13 86       	std	Z+11, r1	; 0x0b
 40a:	12 86       	std	Z+10, r1	; 0x0a
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	83 83       	std	Z+3, r24	; 0x03
 410:	15 86       	std	Z+13, r1	; 0x0d
 412:	14 86       	std	Z+12, r1	; 0x0c
	
	DDRB = 0xF0;	//Configure Port B, Pins b7 to b4 are output. Pins b3 to b0 are input.
 414:	80 ef       	ldi	r24, 0xF0	; 240
 416:	84 b9       	out	0x04, r24	; 4
	// CTC for Timer 2 Setup
	TCCR2B |= (1<<WGM21);	// Configure Timer 2 to CTC (Clear on timer compare) mode?????????????????????????????
 418:	a1 eb       	ldi	r26, 0xB1	; 177
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	8c 91       	ld	r24, X
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	8c 93       	st	X, r24
	OCR2A = 260; // Set CTC Value for ~30HZ (From (8mHz Clock / 1024 prescaler) / (target of 30 HZ) = ~260)
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22)); 	// Setup Timer for 8 mHz with a 1024 prescale
 428:	8c 91       	ld	r24, X
 42a:	87 60       	ori	r24, 0x07	; 7
 42c:	8c 93       	st	X, r24
	
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
 42e:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__iob+0x3>
 432:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__iob+0x2>
#include "DRV8825.h"


static inline void ser_init() /* I'm told Static Inline functions are great for things that are called once (like initializing serial) */
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Serial Transmit and Recieve Enable */
 436:	88 e1       	ldi	r24, 0x18	; 24
 438:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0 << USBS0) | (3 << UCSZ00); /* Set Stop Bit Length (1 Stop Bit) and Frame Length (8 data bits). No parity */
 43c:	86 e0       	ldi	r24, 0x06	; 6
 43e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = (unsigned char)(BAUD_PRESCALE >> 8); /* Load upper 8-bits of baud rate value into high byte of UBBR0 register */
 442:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE; /* Load lower 8-bits of the baud rate value into low byte of UBBR0 register */
 446:	8f ec       	ldi	r24, 0xCF	; 207
 448:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	while ( !( UCSR0A & (1 << UDRE0)));
 44c:	e0 ec       	ldi	r30, 0xC0	; 192
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	85 ff       	sbrs	r24, 5
 454:	fd cf       	rjmp	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	; /* Wait for an empty Transmit Buffer */
	UDR0 = display_On; /* Turn LCD on with no blink and no cursor */
 456:	06 ec       	ldi	r16, 0xC6	; 198
 458:	10 e0       	ldi	r17, 0x00	; 0
 45a:	86 e1       	ldi	r24, 0x16	; 22
 45c:	f8 01       	movw	r30, r16
 45e:	80 83       	st	Z, r24
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
	
	// Serial Init, LCD Backlight on
	ser_init(); /* Serial Initialize */
	UDR0 = backlight_on; /* Turn on LCD backlight */
 460:	0f 2e       	mov	r0, r31
 462:	f1 e1       	ldi	r31, 0x11	; 17
 464:	ff 2e       	mov	r15, r31
 466:	f0 2d       	mov	r31, r0
 468:	f0 82       	st	Z, r15
	
	//Create Servo Object and Init
	Servo MainServo;
	MainServo.Intialize();
 46a:	ce 01       	movw	r24, r28
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN5Servo9IntializeEv>
		
	//Create Stepper Object and Init
	DRV8825 MainStepper;
	MainStepper.Initialize();
 472:	ce 01       	movw	r24, r28
 474:	05 96       	adiw	r24, 0x05	; 5
 476:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN7DRV882510InitializeEv>
	
	// Scratchpad variable
	int digit;	/* Temporary variable to hold the value of which key is pressed */

	//Init LCD splash screen
	!( UCSR0A & (1 << UDRE0));
 47a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UDR0 = form_feed;
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	f8 01       	movw	r30, r16
 482:	80 83       	st	Z, r24
 484:	8f e0       	ldi	r24, 0x0F	; 15
 486:	97 e2       	ldi	r25, 0x27	; 39
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
	_delay_ms(5);
	UDR0 = backlight_on;
 490:	f0 82       	st	Z, r15
	printf("Welcome!");
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	9f 93       	push	r25
 498:	8f 93       	push	r24
 49a:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
		if (count >= 4) {
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 4a2:	cc 24       	eor	r12, r12
 4a4:	c3 94       	inc	r12
 4a6:	d1 2c       	mov	r13, r1
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 4a8:	00 ec       	ldi	r16, 0xC0	; 192
 4aa:	10 e0       	ldi	r17, 0x00	; 0
						UDR0 = form_feed;
 4ac:	0f 2e       	mov	r0, r31
 4ae:	f6 ec       	ldi	r31, 0xC6	; 198
 4b0:	8f 2e       	mov	r8, r31
 4b2:	91 2c       	mov	r9, r1
 4b4:	f0 2d       	mov	r31, r0
 4b6:	0f 2e       	mov	r0, r31
 4b8:	fc e0       	ldi	r31, 0x0C	; 12
 4ba:	3f 2e       	mov	r3, r31
 4bc:	f0 2d       	mov	r31, r0
						_delay_ms(5);
						UDR0 = backlight_on;
 4be:	0f 2e       	mov	r0, r31
 4c0:	f1 e1       	ldi	r31, 0x11	; 17
 4c2:	4f 2e       	mov	r4, r31
 4c4:	f0 2d       	mov	r31, r0
						printf("The # is:\r");
 4c6:	0f 2e       	mov	r0, r31
 4c8:	fb e2       	ldi	r31, 0x2B	; 43
 4ca:	af 2e       	mov	r10, r31
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	bf 2e       	mov	r11, r31
 4d0:	f0 2d       	mov	r31, r0
				digit = keypad();	/* Call the  function "keypad" to return the value of key pressed, and hold it with variable "digit" */
				switch(digit) /* Now evaluate value of "digit" to match with the LED pattern needed to be exported to Port B */
				{
					case '0':
						MainStepper.Runtostep(6400,true);
						printf("Rotating Stepper!");
 4d2:	0f 2e       	mov	r0, r31
 4d4:	f9 e1       	ldi	r31, 0x19	; 25
 4d6:	6f 2e       	mov	r6, r31
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	7f 2e       	mov	r7, r31
 4dc:	f0 2d       	mov	r31, r0
					printf("%c", digit);
					_delay_ms(50);
					break;
				}
			}
			TIFR2 = (1<<OCF2A); // Clear CTC flag by writing a logic 1 to it
 4de:	68 94       	set
 4e0:	55 24       	eor	r5, r5
 4e2:	51 f8       	bld	r5, 1
	UDR0 = backlight_on;
	printf("Welcome!");
	
	while(1)
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
 4e4:	b9 9b       	sbis	0x17, 1	; 23
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = ((~BUTTON_PIN & BUTTON_MASK) | (~BUTTON_PIN & BUTTON_MASK1) | (~BUTTON_PIN & BUTTON_MASK2) | (~BUTTON_PIN & BUTTON_MASK3)) != 0; // This is what allows multiple buttons to be debounced
 4e8:	43 b1       	in	r20, 0x03	; 3
 4ea:	33 b1       	in	r19, 0x03	; 3
 4ec:	93 b1       	in	r25, 0x03	; 3
 4ee:	23 b1       	in	r18, 0x03	; 3
	
	
	// Original Debounce
	if (current_state != button_state) {
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	40 95       	com	r20
 4f4:	50 95       	com	r21
 4f6:	ba 01       	movw	r22, r20
 4f8:	60 71       	andi	r22, 0x10	; 16
 4fa:	77 27       	eor	r23, r23
 4fc:	43 2f       	mov	r20, r19
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	40 95       	com	r20
 502:	50 95       	com	r21
 504:	40 72       	andi	r20, 0x20	; 32
 506:	55 27       	eor	r21, r21
 508:	46 2b       	or	r20, r22
 50a:	57 2b       	or	r21, r23
 50c:	89 2f       	mov	r24, r25
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	80 74       	andi	r24, 0x40	; 64
 516:	99 27       	eor	r25, r25
 518:	84 2b       	or	r24, r20
 51a:	95 2b       	or	r25, r21
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	20 95       	com	r18
 520:	30 95       	com	r19
 522:	20 78       	andi	r18, 0x80	; 128
 524:	33 27       	eor	r19, r19
 526:	82 2b       	or	r24, r18
 528:	93 2b       	or	r25, r19
 52a:	89 2b       	or	r24, r25
 52c:	71 f0       	breq	.+28     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		// Button state is about to be changed, increase counter
		count++;
 52e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		if (count >= 4) {
 538:	84 30       	cpi	r24, 0x04	; 4
 53a:	48 f0       	brcs	.+18     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 53c:	d0 92 4e 01 	sts	0x014E, r13	; 0x80014e <button_down+0x1>
 540:	c0 92 4d 01 	sts	0x014D, r12	; 0x80014d <button_down>
			}
			count = 0;
 544:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 548:	02 c0       	rjmp	.+4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		}
		} else {
		// Reset counter
		count = 0;
 54a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
		{
			debounce();
			
			if (button_down)
 54e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <button_down>
 552:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <button_down+0x1>
 556:	89 2b       	or	r24, r25
 558:	09 f4       	brne	.+2      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 55a:	60 c0       	rjmp	.+192    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
			{
				//printf("Hello");
				button_down = 0;
 55c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <button_down+0x1>
 560:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <button_down>
				digit = keypad();	/* Call the  function "keypad" to return the value of key pressed, and hold it with variable "digit" */
 564:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z6keypadv>
 568:	e8 2e       	mov	r14, r24
 56a:	f1 2c       	mov	r15, r1
				switch(digit) /* Now evaluate value of "digit" to match with the LED pattern needed to be exported to Port B */
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	b3 97       	sbiw	r30, 0x23	; 35
 572:	e2 32       	cpi	r30, 0x22	; 34
 574:	f1 05       	cpc	r31, r1
 576:	08 f0       	brcs	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	51 c0       	rjmp	.+162    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 57a:	e6 5a       	subi	r30, 0xA6	; 166
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__tablejump2__>
				{
					case '0':
						MainStepper.Runtostep(6400,true);
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	79 e1       	ldi	r23, 0x19	; 25
 588:	ce 01       	movw	r24, r28
 58a:	05 96       	adiw	r24, 0x05	; 5
 58c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN7DRV88259RuntostepEib>
						printf("Rotating Stepper!");
 590:	7f 92       	push	r7
 592:	6f 92       	push	r6
 594:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
						//Remove interrupts to allow UART to function
						break;
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	3f c0       	rjmp	.+126    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 59e:	f8 01       	movw	r30, r16
 5a0:	80 81       	ld	r24, Z
 5a2:	85 ff       	sbrs	r24, 5
 5a4:	fc cf       	rjmp	.-8      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
						UDR0 = form_feed;
 5a6:	f4 01       	movw	r30, r8
 5a8:	30 82       	st	Z, r3
 5aa:	8f e0       	ldi	r24, 0x0F	; 15
 5ac:	97 e2       	ldi	r25, 0x27	; 39
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5b4:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 5b6:	40 82       	st	Z, r4
						printf("The # is:\r");
 5b8:	bf 92       	push	r11
 5ba:	af 92       	push	r10
 5bc:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
						printf("%c", digit);
 5c0:	c7 01       	movw	r24, r14
 5c2:	0e 94 8b 04 	call	0x916	; 0x916 <putchar>
 5c6:	ff e7       	ldi	r31, 0x7F	; 127
 5c8:	28 e3       	ldi	r18, 0x38	; 56
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	f1 50       	subi	r31, 0x01	; 1
 5ce:	20 40       	sbci	r18, 0x00	; 0
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d6:	00 00       	nop
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	1f c0       	rjmp	.+62     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
					case 'B':
					case 'C':
					case 'D':
					case '*':
					case '#':
					while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 5de:	f8 01       	movw	r30, r16
 5e0:	80 81       	ld	r24, Z
 5e2:	85 ff       	sbrs	r24, 5
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
					UDR0 = form_feed;
 5e6:	f4 01       	movw	r30, r8
 5e8:	30 82       	st	Z, r3
 5ea:	8f e0       	ldi	r24, 0x0F	; 15
 5ec:	97 e2       	ldi	r25, 0x27	; 39
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f4:	00 00       	nop
					_delay_ms(5);
					UDR0 = backlight_on;
 5f6:	40 82       	st	Z, r4
					printf("The # is:\r");
 5f8:	bf 92       	push	r11
 5fa:	af 92       	push	r10
 5fc:	0e 94 75 04 	call	0x8ea	; 0x8ea <printf>
					printf("%c", digit);
 600:	c7 01       	movw	r24, r14
 602:	0e 94 8b 04 	call	0x916	; 0x916 <putchar>
 606:	ff e7       	ldi	r31, 0x7F	; 127
 608:	28 e3       	ldi	r18, 0x38	; 56
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	f1 50       	subi	r31, 0x01	; 1
 60e:	20 40       	sbci	r18, 0x00	; 0
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 614:	00 c0       	rjmp	.+0      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 616:	00 00       	nop
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
					_delay_ms(50);
					break;
				}
			}
			TIFR2 = (1<<OCF2A); // Clear CTC flag by writing a logic 1 to it
 61c:	57 ba       	out	0x17, r5	; 23
 61e:	62 cf       	rjmp	.-316    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>

00000620 <__divsf3>:
 620:	0e 94 24 03 	call	0x648	; 0x648 <__divsf3x>
 624:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_round>
 628:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_pscB>
 62c:	58 f0       	brcs	.+22     	; 0x644 <__divsf3+0x24>
 62e:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscA>
 632:	40 f0       	brcs	.+16     	; 0x644 <__divsf3+0x24>
 634:	29 f4       	brne	.+10     	; 0x640 <__divsf3+0x20>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	29 f0       	breq	.+10     	; 0x644 <__divsf3+0x24>
 63a:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 63e:	51 11       	cpse	r21, r1
 640:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_szero>
 644:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_nan>

00000648 <__divsf3x>:
 648:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_split3>
 64c:	68 f3       	brcs	.-38     	; 0x628 <__divsf3+0x8>

0000064e <__divsf3_pse>:
 64e:	99 23       	and	r25, r25
 650:	b1 f3       	breq	.-20     	; 0x63e <__divsf3+0x1e>
 652:	55 23       	and	r21, r21
 654:	91 f3       	breq	.-28     	; 0x63a <__divsf3+0x1a>
 656:	95 1b       	sub	r25, r21
 658:	55 0b       	sbc	r21, r21
 65a:	bb 27       	eor	r27, r27
 65c:	aa 27       	eor	r26, r26
 65e:	62 17       	cp	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	38 f0       	brcs	.+14     	; 0x674 <__divsf3_pse+0x26>
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	22 0f       	add	r18, r18
 66c:	33 1f       	adc	r19, r19
 66e:	44 1f       	adc	r20, r20
 670:	aa 1f       	adc	r26, r26
 672:	a9 f3       	breq	.-22     	; 0x65e <__divsf3_pse+0x10>
 674:	35 d0       	rcall	.+106    	; 0x6e0 <__divsf3_pse+0x92>
 676:	0e 2e       	mov	r0, r30
 678:	3a f0       	brmi	.+14     	; 0x688 <__divsf3_pse+0x3a>
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	32 d0       	rcall	.+100    	; 0x6e2 <__divsf3_pse+0x94>
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	e6 95       	lsr	r30
 684:	00 1c       	adc	r0, r0
 686:	ca f7       	brpl	.-14     	; 0x67a <__divsf3_pse+0x2c>
 688:	2b d0       	rcall	.+86     	; 0x6e0 <__divsf3_pse+0x92>
 68a:	fe 2f       	mov	r31, r30
 68c:	29 d0       	rcall	.+82     	; 0x6e0 <__divsf3_pse+0x92>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	bb 1f       	adc	r27, r27
 696:	26 17       	cp	r18, r22
 698:	37 07       	cpc	r19, r23
 69a:	48 07       	cpc	r20, r24
 69c:	ab 07       	cpc	r26, r27
 69e:	b0 e8       	ldi	r27, 0x80	; 128
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__divsf3_pse+0x56>
 6a2:	bb 0b       	sbc	r27, r27
 6a4:	80 2d       	mov	r24, r0
 6a6:	bf 01       	movw	r22, r30
 6a8:	ff 27       	eor	r31, r31
 6aa:	93 58       	subi	r25, 0x83	; 131
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	3a f0       	brmi	.+14     	; 0x6be <__divsf3_pse+0x70>
 6b0:	9e 3f       	cpi	r25, 0xFE	; 254
 6b2:	51 05       	cpc	r21, r1
 6b4:	78 f0       	brcs	.+30     	; 0x6d4 <__divsf3_pse+0x86>
 6b6:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 6ba:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_szero>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	e4 f3       	brlt	.-8      	; 0x6ba <__divsf3_pse+0x6c>
 6c2:	98 3e       	cpi	r25, 0xE8	; 232
 6c4:	d4 f3       	brlt	.-12     	; 0x6ba <__divsf3_pse+0x6c>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b7 95       	ror	r27
 6ce:	f7 95       	ror	r31
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	c9 f7       	brne	.-14     	; 0x6c6 <__divsf3_pse+0x78>
 6d4:	88 0f       	add	r24, r24
 6d6:	91 1d       	adc	r25, r1
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret
 6e0:	e1 e0       	ldi	r30, 0x01	; 1
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	bb 1f       	adc	r27, r27
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	ba 07       	cpc	r27, r26
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__divsf3_pse+0xae>
 6f4:	62 1b       	sub	r22, r18
 6f6:	73 0b       	sbc	r23, r19
 6f8:	84 0b       	sbc	r24, r20
 6fa:	ba 0b       	sbc	r27, r26
 6fc:	ee 1f       	adc	r30, r30
 6fe:	88 f7       	brcc	.-30     	; 0x6e2 <__divsf3_pse+0x94>
 700:	e0 95       	com	r30
 702:	08 95       	ret

00000704 <__fixunssfsi>:
 704:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_splitA>
 708:	88 f0       	brcs	.+34     	; 0x72c <__fixunssfsi+0x28>
 70a:	9f 57       	subi	r25, 0x7F	; 127
 70c:	98 f0       	brcs	.+38     	; 0x734 <__fixunssfsi+0x30>
 70e:	b9 2f       	mov	r27, r25
 710:	99 27       	eor	r25, r25
 712:	b7 51       	subi	r27, 0x17	; 23
 714:	b0 f0       	brcs	.+44     	; 0x742 <__fixunssfsi+0x3e>
 716:	e1 f0       	breq	.+56     	; 0x750 <__fixunssfsi+0x4c>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	1a f0       	brmi	.+6      	; 0x728 <__fixunssfsi+0x24>
 722:	ba 95       	dec	r27
 724:	c9 f7       	brne	.-14     	; 0x718 <__fixunssfsi+0x14>
 726:	14 c0       	rjmp	.+40     	; 0x750 <__fixunssfsi+0x4c>
 728:	b1 30       	cpi	r27, 0x01	; 1
 72a:	91 f0       	breq	.+36     	; 0x750 <__fixunssfsi+0x4c>
 72c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_zero>
 730:	b1 e0       	ldi	r27, 0x01	; 1
 732:	08 95       	ret
 734:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_zero>
 738:	67 2f       	mov	r22, r23
 73a:	78 2f       	mov	r23, r24
 73c:	88 27       	eor	r24, r24
 73e:	b8 5f       	subi	r27, 0xF8	; 248
 740:	39 f0       	breq	.+14     	; 0x750 <__fixunssfsi+0x4c>
 742:	b9 3f       	cpi	r27, 0xF9	; 249
 744:	cc f3       	brlt	.-14     	; 0x738 <__fixunssfsi+0x34>
 746:	86 95       	lsr	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b3 95       	inc	r27
 74e:	d9 f7       	brne	.-10     	; 0x746 <__fixunssfsi+0x42>
 750:	3e f4       	brtc	.+14     	; 0x760 <__fixunssfsi+0x5c>
 752:	90 95       	com	r25
 754:	80 95       	com	r24
 756:	70 95       	com	r23
 758:	61 95       	neg	r22
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_inf>:
 762:	97 f9       	bld	r25, 7
 764:	9f 67       	ori	r25, 0x7F	; 127
 766:	80 e8       	ldi	r24, 0x80	; 128
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	08 95       	ret

0000076e <__fp_nan>:
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	80 ec       	ldi	r24, 0xC0	; 192
 772:	08 95       	ret

00000774 <__fp_pscA>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	16 16       	cp	r1, r22
 77a:	17 06       	cpc	r1, r23
 77c:	18 06       	cpc	r1, r24
 77e:	09 06       	cpc	r0, r25
 780:	08 95       	ret

00000782 <__fp_pscB>:
 782:	00 24       	eor	r0, r0
 784:	0a 94       	dec	r0
 786:	12 16       	cp	r1, r18
 788:	13 06       	cpc	r1, r19
 78a:	14 06       	cpc	r1, r20
 78c:	05 06       	cpc	r0, r21
 78e:	08 95       	ret

00000790 <__fp_round>:
 790:	09 2e       	mov	r0, r25
 792:	03 94       	inc	r0
 794:	00 0c       	add	r0, r0
 796:	11 f4       	brne	.+4      	; 0x79c <__fp_round+0xc>
 798:	88 23       	and	r24, r24
 79a:	52 f0       	brmi	.+20     	; 0x7b0 <__fp_round+0x20>
 79c:	bb 0f       	add	r27, r27
 79e:	40 f4       	brcc	.+16     	; 0x7b0 <__fp_round+0x20>
 7a0:	bf 2b       	or	r27, r31
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__fp_round+0x18>
 7a4:	60 ff       	sbrs	r22, 0
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <__fp_round+0x20>
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__fp_split3>:
 7b2:	57 fd       	sbrc	r21, 7
 7b4:	90 58       	subi	r25, 0x80	; 128
 7b6:	44 0f       	add	r20, r20
 7b8:	55 1f       	adc	r21, r21
 7ba:	59 f0       	breq	.+22     	; 0x7d2 <__fp_splitA+0x10>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	71 f0       	breq	.+28     	; 0x7dc <__fp_splitA+0x1a>
 7c0:	47 95       	ror	r20

000007c2 <__fp_splitA>:
 7c2:	88 0f       	add	r24, r24
 7c4:	97 fb       	bst	r25, 7
 7c6:	99 1f       	adc	r25, r25
 7c8:	61 f0       	breq	.+24     	; 0x7e2 <__fp_splitA+0x20>
 7ca:	9f 3f       	cpi	r25, 0xFF	; 255
 7cc:	79 f0       	breq	.+30     	; 0x7ec <__fp_splitA+0x2a>
 7ce:	87 95       	ror	r24
 7d0:	08 95       	ret
 7d2:	12 16       	cp	r1, r18
 7d4:	13 06       	cpc	r1, r19
 7d6:	14 06       	cpc	r1, r20
 7d8:	55 1f       	adc	r21, r21
 7da:	f2 cf       	rjmp	.-28     	; 0x7c0 <__fp_split3+0xe>
 7dc:	46 95       	lsr	r20
 7de:	f1 df       	rcall	.-30     	; 0x7c2 <__fp_splitA>
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <__fp_splitA+0x30>
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	18 06       	cpc	r1, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	f1 cf       	rjmp	.-30     	; 0x7ce <__fp_splitA+0xc>
 7ec:	86 95       	lsr	r24
 7ee:	71 05       	cpc	r23, r1
 7f0:	61 05       	cpc	r22, r1
 7f2:	08 94       	sec
 7f4:	08 95       	ret

000007f6 <__fp_zero>:
 7f6:	e8 94       	clt

000007f8 <__fp_szero>:
 7f8:	bb 27       	eor	r27, r27
 7fa:	66 27       	eor	r22, r22
 7fc:	77 27       	eor	r23, r23
 7fe:	cb 01       	movw	r24, r22
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__mulsf3>:
 804:	0e 94 15 04 	call	0x82a	; 0x82a <__mulsf3x>
 808:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_round>
 80c:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscA>
 810:	38 f0       	brcs	.+14     	; 0x820 <__mulsf3+0x1c>
 812:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_pscB>
 816:	20 f0       	brcs	.+8      	; 0x820 <__mulsf3+0x1c>
 818:	95 23       	and	r25, r21
 81a:	11 f0       	breq	.+4      	; 0x820 <__mulsf3+0x1c>
 81c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 820:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_nan>
 824:	11 24       	eor	r1, r1
 826:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_szero>

0000082a <__mulsf3x>:
 82a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_split3>
 82e:	70 f3       	brcs	.-36     	; 0x80c <__mulsf3+0x8>

00000830 <__mulsf3_pse>:
 830:	95 9f       	mul	r25, r21
 832:	c1 f3       	breq	.-16     	; 0x824 <__mulsf3+0x20>
 834:	95 0f       	add	r25, r21
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	55 1f       	adc	r21, r21
 83a:	62 9f       	mul	r22, r18
 83c:	f0 01       	movw	r30, r0
 83e:	72 9f       	mul	r23, r18
 840:	bb 27       	eor	r27, r27
 842:	f0 0d       	add	r31, r0
 844:	b1 1d       	adc	r27, r1
 846:	63 9f       	mul	r22, r19
 848:	aa 27       	eor	r26, r26
 84a:	f0 0d       	add	r31, r0
 84c:	b1 1d       	adc	r27, r1
 84e:	aa 1f       	adc	r26, r26
 850:	64 9f       	mul	r22, r20
 852:	66 27       	eor	r22, r22
 854:	b0 0d       	add	r27, r0
 856:	a1 1d       	adc	r26, r1
 858:	66 1f       	adc	r22, r22
 85a:	82 9f       	mul	r24, r18
 85c:	22 27       	eor	r18, r18
 85e:	b0 0d       	add	r27, r0
 860:	a1 1d       	adc	r26, r1
 862:	62 1f       	adc	r22, r18
 864:	73 9f       	mul	r23, r19
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	62 1f       	adc	r22, r18
 86c:	83 9f       	mul	r24, r19
 86e:	a0 0d       	add	r26, r0
 870:	61 1d       	adc	r22, r1
 872:	22 1f       	adc	r18, r18
 874:	74 9f       	mul	r23, r20
 876:	33 27       	eor	r19, r19
 878:	a0 0d       	add	r26, r0
 87a:	61 1d       	adc	r22, r1
 87c:	23 1f       	adc	r18, r19
 87e:	84 9f       	mul	r24, r20
 880:	60 0d       	add	r22, r0
 882:	21 1d       	adc	r18, r1
 884:	82 2f       	mov	r24, r18
 886:	76 2f       	mov	r23, r22
 888:	6a 2f       	mov	r22, r26
 88a:	11 24       	eor	r1, r1
 88c:	9f 57       	subi	r25, 0x7F	; 127
 88e:	50 40       	sbci	r21, 0x00	; 0
 890:	9a f0       	brmi	.+38     	; 0x8b8 <__mulsf3_pse+0x88>
 892:	f1 f0       	breq	.+60     	; 0x8d0 <__mulsf3_pse+0xa0>
 894:	88 23       	and	r24, r24
 896:	4a f0       	brmi	.+18     	; 0x8aa <__mulsf3_pse+0x7a>
 898:	ee 0f       	add	r30, r30
 89a:	ff 1f       	adc	r31, r31
 89c:	bb 1f       	adc	r27, r27
 89e:	66 1f       	adc	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	91 50       	subi	r25, 0x01	; 1
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	a9 f7       	brne	.-22     	; 0x894 <__mulsf3_pse+0x64>
 8aa:	9e 3f       	cpi	r25, 0xFE	; 254
 8ac:	51 05       	cpc	r21, r1
 8ae:	80 f0       	brcs	.+32     	; 0x8d0 <__mulsf3_pse+0xa0>
 8b0:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 8b4:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_szero>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	e4 f3       	brlt	.-8      	; 0x8b4 <__mulsf3_pse+0x84>
 8bc:	98 3e       	cpi	r25, 0xE8	; 232
 8be:	d4 f3       	brlt	.-12     	; 0x8b4 <__mulsf3_pse+0x84>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f7 95       	ror	r31
 8ca:	e7 95       	ror	r30
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	c1 f7       	brne	.-16     	; 0x8c0 <__mulsf3_pse+0x90>
 8d0:	fe 2b       	or	r31, r30
 8d2:	88 0f       	add	r24, r24
 8d4:	91 1d       	adc	r25, r1
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__tablejump2__>:
 8de:	ee 0f       	add	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	05 90       	lpm	r0, Z+
 8e4:	f4 91       	lpm	r31, Z
 8e6:	e0 2d       	mov	r30, r0
 8e8:	09 94       	ijmp

000008ea <printf>:
 8ea:	a0 e0       	ldi	r26, 0x00	; 0
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	eb e7       	ldi	r30, 0x7B	; 123
 8f0:	f4 e0       	ldi	r31, 0x04	; 4
 8f2:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__prologue_saves__+0x20>
 8f6:	ae 01       	movw	r20, r28
 8f8:	4b 5f       	subi	r20, 0xFB	; 251
 8fa:	5f 4f       	sbci	r21, 0xFF	; 255
 8fc:	fa 01       	movw	r30, r20
 8fe:	61 91       	ld	r22, Z+
 900:	71 91       	ld	r23, Z+
 902:	af 01       	movw	r20, r30
 904:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__iob+0x2>
 908:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <__iob+0x3>
 90c:	0e 94 92 04 	call	0x924	; 0x924 <vfprintf>
 910:	e2 e0       	ldi	r30, 0x02	; 2
 912:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__epilogue_restores__+0x20>

00000916 <putchar>:
 916:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <__iob+0x2>
 91a:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <__iob+0x3>
 91e:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 922:	08 95       	ret

00000924 <vfprintf>:
 924:	ab e0       	ldi	r26, 0x0B	; 11
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	e8 e9       	ldi	r30, 0x98	; 152
 92a:	f4 e0       	ldi	r31, 0x04	; 4
 92c:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__prologue_saves__>
 930:	6c 01       	movw	r12, r24
 932:	7b 01       	movw	r14, r22
 934:	8a 01       	movw	r16, r20
 936:	fc 01       	movw	r30, r24
 938:	17 82       	std	Z+7, r1	; 0x07
 93a:	16 82       	std	Z+6, r1	; 0x06
 93c:	83 81       	ldd	r24, Z+3	; 0x03
 93e:	81 ff       	sbrs	r24, 1
 940:	cc c1       	rjmp	.+920    	; 0xcda <vfprintf+0x3b6>
 942:	ce 01       	movw	r24, r28
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	3c 01       	movw	r6, r24
 948:	f6 01       	movw	r30, r12
 94a:	93 81       	ldd	r25, Z+3	; 0x03
 94c:	f7 01       	movw	r30, r14
 94e:	93 fd       	sbrc	r25, 3
 950:	85 91       	lpm	r24, Z+
 952:	93 ff       	sbrs	r25, 3
 954:	81 91       	ld	r24, Z+
 956:	7f 01       	movw	r14, r30
 958:	88 23       	and	r24, r24
 95a:	09 f4       	brne	.+2      	; 0x95e <vfprintf+0x3a>
 95c:	ba c1       	rjmp	.+884    	; 0xcd2 <vfprintf+0x3ae>
 95e:	85 32       	cpi	r24, 0x25	; 37
 960:	39 f4       	brne	.+14     	; 0x970 <vfprintf+0x4c>
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	7f 01       	movw	r14, r30
 96c:	85 32       	cpi	r24, 0x25	; 37
 96e:	29 f4       	brne	.+10     	; 0x97a <vfprintf+0x56>
 970:	b6 01       	movw	r22, r12
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 978:	e7 cf       	rjmp	.-50     	; 0x948 <vfprintf+0x24>
 97a:	91 2c       	mov	r9, r1
 97c:	21 2c       	mov	r2, r1
 97e:	31 2c       	mov	r3, r1
 980:	ff e1       	ldi	r31, 0x1F	; 31
 982:	f3 15       	cp	r31, r3
 984:	d8 f0       	brcs	.+54     	; 0x9bc <vfprintf+0x98>
 986:	8b 32       	cpi	r24, 0x2B	; 43
 988:	79 f0       	breq	.+30     	; 0x9a8 <vfprintf+0x84>
 98a:	38 f4       	brcc	.+14     	; 0x99a <vfprintf+0x76>
 98c:	80 32       	cpi	r24, 0x20	; 32
 98e:	79 f0       	breq	.+30     	; 0x9ae <vfprintf+0x8a>
 990:	83 32       	cpi	r24, 0x23	; 35
 992:	a1 f4       	brne	.+40     	; 0x9bc <vfprintf+0x98>
 994:	23 2d       	mov	r18, r3
 996:	20 61       	ori	r18, 0x10	; 16
 998:	1d c0       	rjmp	.+58     	; 0x9d4 <vfprintf+0xb0>
 99a:	8d 32       	cpi	r24, 0x2D	; 45
 99c:	61 f0       	breq	.+24     	; 0x9b6 <vfprintf+0x92>
 99e:	80 33       	cpi	r24, 0x30	; 48
 9a0:	69 f4       	brne	.+26     	; 0x9bc <vfprintf+0x98>
 9a2:	23 2d       	mov	r18, r3
 9a4:	21 60       	ori	r18, 0x01	; 1
 9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <vfprintf+0xb0>
 9a8:	83 2d       	mov	r24, r3
 9aa:	82 60       	ori	r24, 0x02	; 2
 9ac:	38 2e       	mov	r3, r24
 9ae:	e3 2d       	mov	r30, r3
 9b0:	e4 60       	ori	r30, 0x04	; 4
 9b2:	3e 2e       	mov	r3, r30
 9b4:	2a c0       	rjmp	.+84     	; 0xa0a <vfprintf+0xe6>
 9b6:	f3 2d       	mov	r31, r3
 9b8:	f8 60       	ori	r31, 0x08	; 8
 9ba:	1d c0       	rjmp	.+58     	; 0x9f6 <vfprintf+0xd2>
 9bc:	37 fc       	sbrc	r3, 7
 9be:	2d c0       	rjmp	.+90     	; 0xa1a <vfprintf+0xf6>
 9c0:	20 ed       	ldi	r18, 0xD0	; 208
 9c2:	28 0f       	add	r18, r24
 9c4:	2a 30       	cpi	r18, 0x0A	; 10
 9c6:	40 f0       	brcs	.+16     	; 0x9d8 <vfprintf+0xb4>
 9c8:	8e 32       	cpi	r24, 0x2E	; 46
 9ca:	b9 f4       	brne	.+46     	; 0x9fa <vfprintf+0xd6>
 9cc:	36 fc       	sbrc	r3, 6
 9ce:	81 c1       	rjmp	.+770    	; 0xcd2 <vfprintf+0x3ae>
 9d0:	23 2d       	mov	r18, r3
 9d2:	20 64       	ori	r18, 0x40	; 64
 9d4:	32 2e       	mov	r3, r18
 9d6:	19 c0       	rjmp	.+50     	; 0xa0a <vfprintf+0xe6>
 9d8:	36 fe       	sbrs	r3, 6
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <vfprintf+0xc4>
 9dc:	8a e0       	ldi	r24, 0x0A	; 10
 9de:	98 9e       	mul	r9, r24
 9e0:	20 0d       	add	r18, r0
 9e2:	11 24       	eor	r1, r1
 9e4:	92 2e       	mov	r9, r18
 9e6:	11 c0       	rjmp	.+34     	; 0xa0a <vfprintf+0xe6>
 9e8:	ea e0       	ldi	r30, 0x0A	; 10
 9ea:	2e 9e       	mul	r2, r30
 9ec:	20 0d       	add	r18, r0
 9ee:	11 24       	eor	r1, r1
 9f0:	22 2e       	mov	r2, r18
 9f2:	f3 2d       	mov	r31, r3
 9f4:	f0 62       	ori	r31, 0x20	; 32
 9f6:	3f 2e       	mov	r3, r31
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <vfprintf+0xe6>
 9fa:	8c 36       	cpi	r24, 0x6C	; 108
 9fc:	21 f4       	brne	.+8      	; 0xa06 <vfprintf+0xe2>
 9fe:	83 2d       	mov	r24, r3
 a00:	80 68       	ori	r24, 0x80	; 128
 a02:	38 2e       	mov	r3, r24
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0xe6>
 a06:	88 36       	cpi	r24, 0x68	; 104
 a08:	41 f4       	brne	.+16     	; 0xa1a <vfprintf+0xf6>
 a0a:	f7 01       	movw	r30, r14
 a0c:	93 fd       	sbrc	r25, 3
 a0e:	85 91       	lpm	r24, Z+
 a10:	93 ff       	sbrs	r25, 3
 a12:	81 91       	ld	r24, Z+
 a14:	7f 01       	movw	r14, r30
 a16:	81 11       	cpse	r24, r1
 a18:	b3 cf       	rjmp	.-154    	; 0x980 <vfprintf+0x5c>
 a1a:	98 2f       	mov	r25, r24
 a1c:	9f 7d       	andi	r25, 0xDF	; 223
 a1e:	95 54       	subi	r25, 0x45	; 69
 a20:	93 30       	cpi	r25, 0x03	; 3
 a22:	28 f4       	brcc	.+10     	; 0xa2e <vfprintf+0x10a>
 a24:	0c 5f       	subi	r16, 0xFC	; 252
 a26:	1f 4f       	sbci	r17, 0xFF	; 255
 a28:	9f e3       	ldi	r25, 0x3F	; 63
 a2a:	99 83       	std	Y+1, r25	; 0x01
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <vfprintf+0x124>
 a2e:	83 36       	cpi	r24, 0x63	; 99
 a30:	31 f0       	breq	.+12     	; 0xa3e <vfprintf+0x11a>
 a32:	83 37       	cpi	r24, 0x73	; 115
 a34:	71 f0       	breq	.+28     	; 0xa52 <vfprintf+0x12e>
 a36:	83 35       	cpi	r24, 0x53	; 83
 a38:	09 f0       	breq	.+2      	; 0xa3c <vfprintf+0x118>
 a3a:	59 c0       	rjmp	.+178    	; 0xaee <vfprintf+0x1ca>
 a3c:	21 c0       	rjmp	.+66     	; 0xa80 <vfprintf+0x15c>
 a3e:	f8 01       	movw	r30, r16
 a40:	80 81       	ld	r24, Z
 a42:	89 83       	std	Y+1, r24	; 0x01
 a44:	0e 5f       	subi	r16, 0xFE	; 254
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	88 24       	eor	r8, r8
 a4a:	83 94       	inc	r8
 a4c:	91 2c       	mov	r9, r1
 a4e:	53 01       	movw	r10, r6
 a50:	13 c0       	rjmp	.+38     	; 0xa78 <vfprintf+0x154>
 a52:	28 01       	movw	r4, r16
 a54:	f2 e0       	ldi	r31, 0x02	; 2
 a56:	4f 0e       	add	r4, r31
 a58:	51 1c       	adc	r5, r1
 a5a:	f8 01       	movw	r30, r16
 a5c:	a0 80       	ld	r10, Z
 a5e:	b1 80       	ldd	r11, Z+1	; 0x01
 a60:	36 fe       	sbrs	r3, 6
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <vfprintf+0x146>
 a64:	69 2d       	mov	r22, r9
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0x14a>
 a6a:	6f ef       	ldi	r22, 0xFF	; 255
 a6c:	7f ef       	ldi	r23, 0xFF	; 255
 a6e:	c5 01       	movw	r24, r10
 a70:	0e 94 7e 06 	call	0xcfc	; 0xcfc <strnlen>
 a74:	4c 01       	movw	r8, r24
 a76:	82 01       	movw	r16, r4
 a78:	f3 2d       	mov	r31, r3
 a7a:	ff 77       	andi	r31, 0x7F	; 127
 a7c:	3f 2e       	mov	r3, r31
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <vfprintf+0x188>
 a80:	28 01       	movw	r4, r16
 a82:	22 e0       	ldi	r18, 0x02	; 2
 a84:	42 0e       	add	r4, r18
 a86:	51 1c       	adc	r5, r1
 a88:	f8 01       	movw	r30, r16
 a8a:	a0 80       	ld	r10, Z
 a8c:	b1 80       	ldd	r11, Z+1	; 0x01
 a8e:	36 fe       	sbrs	r3, 6
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <vfprintf+0x174>
 a92:	69 2d       	mov	r22, r9
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x178>
 a98:	6f ef       	ldi	r22, 0xFF	; 255
 a9a:	7f ef       	ldi	r23, 0xFF	; 255
 a9c:	c5 01       	movw	r24, r10
 a9e:	0e 94 73 06 	call	0xce6	; 0xce6 <strnlen_P>
 aa2:	4c 01       	movw	r8, r24
 aa4:	f3 2d       	mov	r31, r3
 aa6:	f0 68       	ori	r31, 0x80	; 128
 aa8:	3f 2e       	mov	r3, r31
 aaa:	82 01       	movw	r16, r4
 aac:	33 fc       	sbrc	r3, 3
 aae:	1b c0       	rjmp	.+54     	; 0xae6 <vfprintf+0x1c2>
 ab0:	82 2d       	mov	r24, r2
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	88 16       	cp	r8, r24
 ab6:	99 06       	cpc	r9, r25
 ab8:	b0 f4       	brcc	.+44     	; 0xae6 <vfprintf+0x1c2>
 aba:	b6 01       	movw	r22, r12
 abc:	80 e2       	ldi	r24, 0x20	; 32
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 ac4:	2a 94       	dec	r2
 ac6:	f4 cf       	rjmp	.-24     	; 0xab0 <vfprintf+0x18c>
 ac8:	f5 01       	movw	r30, r10
 aca:	37 fc       	sbrc	r3, 7
 acc:	85 91       	lpm	r24, Z+
 ace:	37 fe       	sbrs	r3, 7
 ad0:	81 91       	ld	r24, Z+
 ad2:	5f 01       	movw	r10, r30
 ad4:	b6 01       	movw	r22, r12
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 adc:	21 10       	cpse	r2, r1
 ade:	2a 94       	dec	r2
 ae0:	21 e0       	ldi	r18, 0x01	; 1
 ae2:	82 1a       	sub	r8, r18
 ae4:	91 08       	sbc	r9, r1
 ae6:	81 14       	cp	r8, r1
 ae8:	91 04       	cpc	r9, r1
 aea:	71 f7       	brne	.-36     	; 0xac8 <vfprintf+0x1a4>
 aec:	e8 c0       	rjmp	.+464    	; 0xcbe <vfprintf+0x39a>
 aee:	84 36       	cpi	r24, 0x64	; 100
 af0:	11 f0       	breq	.+4      	; 0xaf6 <vfprintf+0x1d2>
 af2:	89 36       	cpi	r24, 0x69	; 105
 af4:	41 f5       	brne	.+80     	; 0xb46 <vfprintf+0x222>
 af6:	f8 01       	movw	r30, r16
 af8:	37 fe       	sbrs	r3, 7
 afa:	07 c0       	rjmp	.+14     	; 0xb0a <vfprintf+0x1e6>
 afc:	60 81       	ld	r22, Z
 afe:	71 81       	ldd	r23, Z+1	; 0x01
 b00:	82 81       	ldd	r24, Z+2	; 0x02
 b02:	93 81       	ldd	r25, Z+3	; 0x03
 b04:	0c 5f       	subi	r16, 0xFC	; 252
 b06:	1f 4f       	sbci	r17, 0xFF	; 255
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <vfprintf+0x1f6>
 b0a:	60 81       	ld	r22, Z
 b0c:	71 81       	ldd	r23, Z+1	; 0x01
 b0e:	07 2e       	mov	r0, r23
 b10:	00 0c       	add	r0, r0
 b12:	88 0b       	sbc	r24, r24
 b14:	99 0b       	sbc	r25, r25
 b16:	0e 5f       	subi	r16, 0xFE	; 254
 b18:	1f 4f       	sbci	r17, 0xFF	; 255
 b1a:	f3 2d       	mov	r31, r3
 b1c:	ff 76       	andi	r31, 0x6F	; 111
 b1e:	3f 2e       	mov	r3, r31
 b20:	97 ff       	sbrs	r25, 7
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <vfprintf+0x212>
 b24:	90 95       	com	r25
 b26:	80 95       	com	r24
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	f0 68       	ori	r31, 0x80	; 128
 b34:	3f 2e       	mov	r3, r31
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	a3 01       	movw	r20, r6
 b3c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__ultoa_invert>
 b40:	88 2e       	mov	r8, r24
 b42:	86 18       	sub	r8, r6
 b44:	45 c0       	rjmp	.+138    	; 0xbd0 <vfprintf+0x2ac>
 b46:	85 37       	cpi	r24, 0x75	; 117
 b48:	31 f4       	brne	.+12     	; 0xb56 <vfprintf+0x232>
 b4a:	23 2d       	mov	r18, r3
 b4c:	2f 7e       	andi	r18, 0xEF	; 239
 b4e:	b2 2e       	mov	r11, r18
 b50:	2a e0       	ldi	r18, 0x0A	; 10
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	25 c0       	rjmp	.+74     	; 0xba0 <vfprintf+0x27c>
 b56:	93 2d       	mov	r25, r3
 b58:	99 7f       	andi	r25, 0xF9	; 249
 b5a:	b9 2e       	mov	r11, r25
 b5c:	8f 36       	cpi	r24, 0x6F	; 111
 b5e:	c1 f0       	breq	.+48     	; 0xb90 <vfprintf+0x26c>
 b60:	18 f4       	brcc	.+6      	; 0xb68 <vfprintf+0x244>
 b62:	88 35       	cpi	r24, 0x58	; 88
 b64:	79 f0       	breq	.+30     	; 0xb84 <vfprintf+0x260>
 b66:	b5 c0       	rjmp	.+362    	; 0xcd2 <vfprintf+0x3ae>
 b68:	80 37       	cpi	r24, 0x70	; 112
 b6a:	19 f0       	breq	.+6      	; 0xb72 <vfprintf+0x24e>
 b6c:	88 37       	cpi	r24, 0x78	; 120
 b6e:	21 f0       	breq	.+8      	; 0xb78 <vfprintf+0x254>
 b70:	b0 c0       	rjmp	.+352    	; 0xcd2 <vfprintf+0x3ae>
 b72:	e9 2f       	mov	r30, r25
 b74:	e0 61       	ori	r30, 0x10	; 16
 b76:	be 2e       	mov	r11, r30
 b78:	b4 fe       	sbrs	r11, 4
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <vfprintf+0x272>
 b7c:	fb 2d       	mov	r31, r11
 b7e:	f4 60       	ori	r31, 0x04	; 4
 b80:	bf 2e       	mov	r11, r31
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <vfprintf+0x272>
 b84:	34 fe       	sbrs	r3, 4
 b86:	0a c0       	rjmp	.+20     	; 0xb9c <vfprintf+0x278>
 b88:	29 2f       	mov	r18, r25
 b8a:	26 60       	ori	r18, 0x06	; 6
 b8c:	b2 2e       	mov	r11, r18
 b8e:	06 c0       	rjmp	.+12     	; 0xb9c <vfprintf+0x278>
 b90:	28 e0       	ldi	r18, 0x08	; 8
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	05 c0       	rjmp	.+10     	; 0xba0 <vfprintf+0x27c>
 b96:	20 e1       	ldi	r18, 0x10	; 16
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0x27c>
 b9c:	20 e1       	ldi	r18, 0x10	; 16
 b9e:	32 e0       	ldi	r19, 0x02	; 2
 ba0:	f8 01       	movw	r30, r16
 ba2:	b7 fe       	sbrs	r11, 7
 ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <vfprintf+0x290>
 ba6:	60 81       	ld	r22, Z
 ba8:	71 81       	ldd	r23, Z+1	; 0x01
 baa:	82 81       	ldd	r24, Z+2	; 0x02
 bac:	93 81       	ldd	r25, Z+3	; 0x03
 bae:	0c 5f       	subi	r16, 0xFC	; 252
 bb0:	1f 4f       	sbci	r17, 0xFF	; 255
 bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <vfprintf+0x29c>
 bb4:	60 81       	ld	r22, Z
 bb6:	71 81       	ldd	r23, Z+1	; 0x01
 bb8:	80 e0       	ldi	r24, 0x00	; 0
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	0e 5f       	subi	r16, 0xFE	; 254
 bbe:	1f 4f       	sbci	r17, 0xFF	; 255
 bc0:	a3 01       	movw	r20, r6
 bc2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__ultoa_invert>
 bc6:	88 2e       	mov	r8, r24
 bc8:	86 18       	sub	r8, r6
 bca:	fb 2d       	mov	r31, r11
 bcc:	ff 77       	andi	r31, 0x7F	; 127
 bce:	3f 2e       	mov	r3, r31
 bd0:	36 fe       	sbrs	r3, 6
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <vfprintf+0x2ca>
 bd4:	23 2d       	mov	r18, r3
 bd6:	2e 7f       	andi	r18, 0xFE	; 254
 bd8:	a2 2e       	mov	r10, r18
 bda:	89 14       	cp	r8, r9
 bdc:	58 f4       	brcc	.+22     	; 0xbf4 <vfprintf+0x2d0>
 bde:	34 fe       	sbrs	r3, 4
 be0:	0b c0       	rjmp	.+22     	; 0xbf8 <vfprintf+0x2d4>
 be2:	32 fc       	sbrc	r3, 2
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <vfprintf+0x2d4>
 be6:	83 2d       	mov	r24, r3
 be8:	8e 7e       	andi	r24, 0xEE	; 238
 bea:	a8 2e       	mov	r10, r24
 bec:	05 c0       	rjmp	.+10     	; 0xbf8 <vfprintf+0x2d4>
 bee:	b8 2c       	mov	r11, r8
 bf0:	a3 2c       	mov	r10, r3
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <vfprintf+0x2d6>
 bf4:	b8 2c       	mov	r11, r8
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <vfprintf+0x2d6>
 bf8:	b9 2c       	mov	r11, r9
 bfa:	a4 fe       	sbrs	r10, 4
 bfc:	0f c0       	rjmp	.+30     	; 0xc1c <vfprintf+0x2f8>
 bfe:	fe 01       	movw	r30, r28
 c00:	e8 0d       	add	r30, r8
 c02:	f1 1d       	adc	r31, r1
 c04:	80 81       	ld	r24, Z
 c06:	80 33       	cpi	r24, 0x30	; 48
 c08:	21 f4       	brne	.+8      	; 0xc12 <vfprintf+0x2ee>
 c0a:	9a 2d       	mov	r25, r10
 c0c:	99 7e       	andi	r25, 0xE9	; 233
 c0e:	a9 2e       	mov	r10, r25
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <vfprintf+0x300>
 c12:	a2 fe       	sbrs	r10, 2
 c14:	06 c0       	rjmp	.+12     	; 0xc22 <vfprintf+0x2fe>
 c16:	b3 94       	inc	r11
 c18:	b3 94       	inc	r11
 c1a:	04 c0       	rjmp	.+8      	; 0xc24 <vfprintf+0x300>
 c1c:	8a 2d       	mov	r24, r10
 c1e:	86 78       	andi	r24, 0x86	; 134
 c20:	09 f0       	breq	.+2      	; 0xc24 <vfprintf+0x300>
 c22:	b3 94       	inc	r11
 c24:	a3 fc       	sbrc	r10, 3
 c26:	11 c0       	rjmp	.+34     	; 0xc4a <vfprintf+0x326>
 c28:	a0 fe       	sbrs	r10, 0
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0x314>
 c2c:	b2 14       	cp	r11, r2
 c2e:	88 f4       	brcc	.+34     	; 0xc52 <vfprintf+0x32e>
 c30:	28 0c       	add	r2, r8
 c32:	92 2c       	mov	r9, r2
 c34:	9b 18       	sub	r9, r11
 c36:	0e c0       	rjmp	.+28     	; 0xc54 <vfprintf+0x330>
 c38:	b2 14       	cp	r11, r2
 c3a:	60 f4       	brcc	.+24     	; 0xc54 <vfprintf+0x330>
 c3c:	b6 01       	movw	r22, r12
 c3e:	80 e2       	ldi	r24, 0x20	; 32
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 c46:	b3 94       	inc	r11
 c48:	f7 cf       	rjmp	.-18     	; 0xc38 <vfprintf+0x314>
 c4a:	b2 14       	cp	r11, r2
 c4c:	18 f4       	brcc	.+6      	; 0xc54 <vfprintf+0x330>
 c4e:	2b 18       	sub	r2, r11
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <vfprintf+0x332>
 c52:	98 2c       	mov	r9, r8
 c54:	21 2c       	mov	r2, r1
 c56:	a4 fe       	sbrs	r10, 4
 c58:	10 c0       	rjmp	.+32     	; 0xc7a <vfprintf+0x356>
 c5a:	b6 01       	movw	r22, r12
 c5c:	80 e3       	ldi	r24, 0x30	; 48
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 c64:	a2 fe       	sbrs	r10, 2
 c66:	17 c0       	rjmp	.+46     	; 0xc96 <vfprintf+0x372>
 c68:	a1 fc       	sbrc	r10, 1
 c6a:	03 c0       	rjmp	.+6      	; 0xc72 <vfprintf+0x34e>
 c6c:	88 e7       	ldi	r24, 0x78	; 120
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <vfprintf+0x352>
 c72:	88 e5       	ldi	r24, 0x58	; 88
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	b6 01       	movw	r22, r12
 c78:	0c c0       	rjmp	.+24     	; 0xc92 <vfprintf+0x36e>
 c7a:	8a 2d       	mov	r24, r10
 c7c:	86 78       	andi	r24, 0x86	; 134
 c7e:	59 f0       	breq	.+22     	; 0xc96 <vfprintf+0x372>
 c80:	a1 fe       	sbrs	r10, 1
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x364>
 c84:	8b e2       	ldi	r24, 0x2B	; 43
 c86:	01 c0       	rjmp	.+2      	; 0xc8a <vfprintf+0x366>
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	a7 fc       	sbrc	r10, 7
 c8c:	8d e2       	ldi	r24, 0x2D	; 45
 c8e:	b6 01       	movw	r22, r12
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 c96:	89 14       	cp	r8, r9
 c98:	38 f4       	brcc	.+14     	; 0xca8 <vfprintf+0x384>
 c9a:	b6 01       	movw	r22, r12
 c9c:	80 e3       	ldi	r24, 0x30	; 48
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 ca4:	9a 94       	dec	r9
 ca6:	f7 cf       	rjmp	.-18     	; 0xc96 <vfprintf+0x372>
 ca8:	8a 94       	dec	r8
 caa:	f3 01       	movw	r30, r6
 cac:	e8 0d       	add	r30, r8
 cae:	f1 1d       	adc	r31, r1
 cb0:	80 81       	ld	r24, Z
 cb2:	b6 01       	movw	r22, r12
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 cba:	81 10       	cpse	r8, r1
 cbc:	f5 cf       	rjmp	.-22     	; 0xca8 <vfprintf+0x384>
 cbe:	22 20       	and	r2, r2
 cc0:	09 f4       	brne	.+2      	; 0xcc4 <vfprintf+0x3a0>
 cc2:	42 ce       	rjmp	.-892    	; 0x948 <vfprintf+0x24>
 cc4:	b6 01       	movw	r22, r12
 cc6:	80 e2       	ldi	r24, 0x20	; 32
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 94 89 06 	call	0xd12	; 0xd12 <fputc>
 cce:	2a 94       	dec	r2
 cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <vfprintf+0x39a>
 cd2:	f6 01       	movw	r30, r12
 cd4:	86 81       	ldd	r24, Z+6	; 0x06
 cd6:	97 81       	ldd	r25, Z+7	; 0x07
 cd8:	02 c0       	rjmp	.+4      	; 0xcde <vfprintf+0x3ba>
 cda:	8f ef       	ldi	r24, 0xFF	; 255
 cdc:	9f ef       	ldi	r25, 0xFF	; 255
 cde:	2b 96       	adiw	r28, 0x0b	; 11
 ce0:	e2 e1       	ldi	r30, 0x12	; 18
 ce2:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__epilogue_restores__>

00000ce6 <strnlen_P>:
 ce6:	fc 01       	movw	r30, r24
 ce8:	05 90       	lpm	r0, Z+
 cea:	61 50       	subi	r22, 0x01	; 1
 cec:	70 40       	sbci	r23, 0x00	; 0
 cee:	01 10       	cpse	r0, r1
 cf0:	d8 f7       	brcc	.-10     	; 0xce8 <strnlen_P+0x2>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	8e 0f       	add	r24, r30
 cf8:	9f 1f       	adc	r25, r31
 cfa:	08 95       	ret

00000cfc <strnlen>:
 cfc:	fc 01       	movw	r30, r24
 cfe:	61 50       	subi	r22, 0x01	; 1
 d00:	70 40       	sbci	r23, 0x00	; 0
 d02:	01 90       	ld	r0, Z+
 d04:	01 10       	cpse	r0, r1
 d06:	d8 f7       	brcc	.-10     	; 0xcfe <strnlen+0x2>
 d08:	80 95       	com	r24
 d0a:	90 95       	com	r25
 d0c:	8e 0f       	add	r24, r30
 d0e:	9f 1f       	adc	r25, r31
 d10:	08 95       	ret

00000d12 <fputc>:
 d12:	0f 93       	push	r16
 d14:	1f 93       	push	r17
 d16:	cf 93       	push	r28
 d18:	df 93       	push	r29
 d1a:	fb 01       	movw	r30, r22
 d1c:	23 81       	ldd	r18, Z+3	; 0x03
 d1e:	21 fd       	sbrc	r18, 1
 d20:	03 c0       	rjmp	.+6      	; 0xd28 <fputc+0x16>
 d22:	8f ef       	ldi	r24, 0xFF	; 255
 d24:	9f ef       	ldi	r25, 0xFF	; 255
 d26:	2c c0       	rjmp	.+88     	; 0xd80 <fputc+0x6e>
 d28:	22 ff       	sbrs	r18, 2
 d2a:	16 c0       	rjmp	.+44     	; 0xd58 <fputc+0x46>
 d2c:	46 81       	ldd	r20, Z+6	; 0x06
 d2e:	57 81       	ldd	r21, Z+7	; 0x07
 d30:	24 81       	ldd	r18, Z+4	; 0x04
 d32:	35 81       	ldd	r19, Z+5	; 0x05
 d34:	42 17       	cp	r20, r18
 d36:	53 07       	cpc	r21, r19
 d38:	44 f4       	brge	.+16     	; 0xd4a <fputc+0x38>
 d3a:	a0 81       	ld	r26, Z
 d3c:	b1 81       	ldd	r27, Z+1	; 0x01
 d3e:	9d 01       	movw	r18, r26
 d40:	2f 5f       	subi	r18, 0xFF	; 255
 d42:	3f 4f       	sbci	r19, 0xFF	; 255
 d44:	31 83       	std	Z+1, r19	; 0x01
 d46:	20 83       	st	Z, r18
 d48:	8c 93       	st	X, r24
 d4a:	26 81       	ldd	r18, Z+6	; 0x06
 d4c:	37 81       	ldd	r19, Z+7	; 0x07
 d4e:	2f 5f       	subi	r18, 0xFF	; 255
 d50:	3f 4f       	sbci	r19, 0xFF	; 255
 d52:	37 83       	std	Z+7, r19	; 0x07
 d54:	26 83       	std	Z+6, r18	; 0x06
 d56:	14 c0       	rjmp	.+40     	; 0xd80 <fputc+0x6e>
 d58:	8b 01       	movw	r16, r22
 d5a:	ec 01       	movw	r28, r24
 d5c:	fb 01       	movw	r30, r22
 d5e:	00 84       	ldd	r0, Z+8	; 0x08
 d60:	f1 85       	ldd	r31, Z+9	; 0x09
 d62:	e0 2d       	mov	r30, r0
 d64:	09 95       	icall
 d66:	89 2b       	or	r24, r25
 d68:	e1 f6       	brne	.-72     	; 0xd22 <fputc+0x10>
 d6a:	d8 01       	movw	r26, r16
 d6c:	16 96       	adiw	r26, 0x06	; 6
 d6e:	8d 91       	ld	r24, X+
 d70:	9c 91       	ld	r25, X
 d72:	17 97       	sbiw	r26, 0x07	; 7
 d74:	01 96       	adiw	r24, 0x01	; 1
 d76:	17 96       	adiw	r26, 0x07	; 7
 d78:	9c 93       	st	X, r25
 d7a:	8e 93       	st	-X, r24
 d7c:	16 97       	sbiw	r26, 0x06	; 6
 d7e:	ce 01       	movw	r24, r28
 d80:	df 91       	pop	r29
 d82:	cf 91       	pop	r28
 d84:	1f 91       	pop	r17
 d86:	0f 91       	pop	r16
 d88:	08 95       	ret

00000d8a <__ultoa_invert>:
 d8a:	fa 01       	movw	r30, r20
 d8c:	aa 27       	eor	r26, r26
 d8e:	28 30       	cpi	r18, 0x08	; 8
 d90:	51 f1       	breq	.+84     	; 0xde6 <__ultoa_invert+0x5c>
 d92:	20 31       	cpi	r18, 0x10	; 16
 d94:	81 f1       	breq	.+96     	; 0xdf6 <__ultoa_invert+0x6c>
 d96:	e8 94       	clt
 d98:	6f 93       	push	r22
 d9a:	6e 7f       	andi	r22, 0xFE	; 254
 d9c:	6e 5f       	subi	r22, 0xFE	; 254
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	8f 4f       	sbci	r24, 0xFF	; 255
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	af 4f       	sbci	r26, 0xFF	; 255
 da6:	b1 e0       	ldi	r27, 0x01	; 1
 da8:	3e d0       	rcall	.+124    	; 0xe26 <__ultoa_invert+0x9c>
 daa:	b4 e0       	ldi	r27, 0x04	; 4
 dac:	3c d0       	rcall	.+120    	; 0xe26 <__ultoa_invert+0x9c>
 dae:	67 0f       	add	r22, r23
 db0:	78 1f       	adc	r23, r24
 db2:	89 1f       	adc	r24, r25
 db4:	9a 1f       	adc	r25, r26
 db6:	a1 1d       	adc	r26, r1
 db8:	68 0f       	add	r22, r24
 dba:	79 1f       	adc	r23, r25
 dbc:	8a 1f       	adc	r24, r26
 dbe:	91 1d       	adc	r25, r1
 dc0:	a1 1d       	adc	r26, r1
 dc2:	6a 0f       	add	r22, r26
 dc4:	71 1d       	adc	r23, r1
 dc6:	81 1d       	adc	r24, r1
 dc8:	91 1d       	adc	r25, r1
 dca:	a1 1d       	adc	r26, r1
 dcc:	20 d0       	rcall	.+64     	; 0xe0e <__ultoa_invert+0x84>
 dce:	09 f4       	brne	.+2      	; 0xdd2 <__ultoa_invert+0x48>
 dd0:	68 94       	set
 dd2:	3f 91       	pop	r19
 dd4:	2a e0       	ldi	r18, 0x0A	; 10
 dd6:	26 9f       	mul	r18, r22
 dd8:	11 24       	eor	r1, r1
 dda:	30 19       	sub	r19, r0
 ddc:	30 5d       	subi	r19, 0xD0	; 208
 dde:	31 93       	st	Z+, r19
 de0:	de f6       	brtc	.-74     	; 0xd98 <__ultoa_invert+0xe>
 de2:	cf 01       	movw	r24, r30
 de4:	08 95       	ret
 de6:	46 2f       	mov	r20, r22
 de8:	47 70       	andi	r20, 0x07	; 7
 dea:	40 5d       	subi	r20, 0xD0	; 208
 dec:	41 93       	st	Z+, r20
 dee:	b3 e0       	ldi	r27, 0x03	; 3
 df0:	0f d0       	rcall	.+30     	; 0xe10 <__ultoa_invert+0x86>
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0x5c>
 df4:	f6 cf       	rjmp	.-20     	; 0xde2 <__ultoa_invert+0x58>
 df6:	46 2f       	mov	r20, r22
 df8:	4f 70       	andi	r20, 0x0F	; 15
 dfa:	40 5d       	subi	r20, 0xD0	; 208
 dfc:	4a 33       	cpi	r20, 0x3A	; 58
 dfe:	18 f0       	brcs	.+6      	; 0xe06 <__ultoa_invert+0x7c>
 e00:	49 5d       	subi	r20, 0xD9	; 217
 e02:	31 fd       	sbrc	r19, 1
 e04:	40 52       	subi	r20, 0x20	; 32
 e06:	41 93       	st	Z+, r20
 e08:	02 d0       	rcall	.+4      	; 0xe0e <__ultoa_invert+0x84>
 e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__ultoa_invert+0x6c>
 e0c:	ea cf       	rjmp	.-44     	; 0xde2 <__ultoa_invert+0x58>
 e0e:	b4 e0       	ldi	r27, 0x04	; 4
 e10:	a6 95       	lsr	r26
 e12:	97 95       	ror	r25
 e14:	87 95       	ror	r24
 e16:	77 95       	ror	r23
 e18:	67 95       	ror	r22
 e1a:	ba 95       	dec	r27
 e1c:	c9 f7       	brne	.-14     	; 0xe10 <__ultoa_invert+0x86>
 e1e:	00 97       	sbiw	r24, 0x00	; 0
 e20:	61 05       	cpc	r22, r1
 e22:	71 05       	cpc	r23, r1
 e24:	08 95       	ret
 e26:	9b 01       	movw	r18, r22
 e28:	ac 01       	movw	r20, r24
 e2a:	0a 2e       	mov	r0, r26
 e2c:	06 94       	lsr	r0
 e2e:	57 95       	ror	r21
 e30:	47 95       	ror	r20
 e32:	37 95       	ror	r19
 e34:	27 95       	ror	r18
 e36:	ba 95       	dec	r27
 e38:	c9 f7       	brne	.-14     	; 0xe2c <__ultoa_invert+0xa2>
 e3a:	62 0f       	add	r22, r18
 e3c:	73 1f       	adc	r23, r19
 e3e:	84 1f       	adc	r24, r20
 e40:	95 1f       	adc	r25, r21
 e42:	a0 1d       	adc	r26, r0
 e44:	08 95       	ret

00000e46 <__prologue_saves__>:
 e46:	2f 92       	push	r2
 e48:	3f 92       	push	r3
 e4a:	4f 92       	push	r4
 e4c:	5f 92       	push	r5
 e4e:	6f 92       	push	r6
 e50:	7f 92       	push	r7
 e52:	8f 92       	push	r8
 e54:	9f 92       	push	r9
 e56:	af 92       	push	r10
 e58:	bf 92       	push	r11
 e5a:	cf 92       	push	r12
 e5c:	df 92       	push	r13
 e5e:	ef 92       	push	r14
 e60:	ff 92       	push	r15
 e62:	0f 93       	push	r16
 e64:	1f 93       	push	r17
 e66:	cf 93       	push	r28
 e68:	df 93       	push	r29
 e6a:	cd b7       	in	r28, 0x3d	; 61
 e6c:	de b7       	in	r29, 0x3e	; 62
 e6e:	ca 1b       	sub	r28, r26
 e70:	db 0b       	sbc	r29, r27
 e72:	0f b6       	in	r0, 0x3f	; 63
 e74:	f8 94       	cli
 e76:	de bf       	out	0x3e, r29	; 62
 e78:	0f be       	out	0x3f, r0	; 63
 e7a:	cd bf       	out	0x3d, r28	; 61
 e7c:	09 94       	ijmp

00000e7e <__epilogue_restores__>:
 e7e:	2a 88       	ldd	r2, Y+18	; 0x12
 e80:	39 88       	ldd	r3, Y+17	; 0x11
 e82:	48 88       	ldd	r4, Y+16	; 0x10
 e84:	5f 84       	ldd	r5, Y+15	; 0x0f
 e86:	6e 84       	ldd	r6, Y+14	; 0x0e
 e88:	7d 84       	ldd	r7, Y+13	; 0x0d
 e8a:	8c 84       	ldd	r8, Y+12	; 0x0c
 e8c:	9b 84       	ldd	r9, Y+11	; 0x0b
 e8e:	aa 84       	ldd	r10, Y+10	; 0x0a
 e90:	b9 84       	ldd	r11, Y+9	; 0x09
 e92:	c8 84       	ldd	r12, Y+8	; 0x08
 e94:	df 80       	ldd	r13, Y+7	; 0x07
 e96:	ee 80       	ldd	r14, Y+6	; 0x06
 e98:	fd 80       	ldd	r15, Y+5	; 0x05
 e9a:	0c 81       	ldd	r16, Y+4	; 0x04
 e9c:	1b 81       	ldd	r17, Y+3	; 0x03
 e9e:	aa 81       	ldd	r26, Y+2	; 0x02
 ea0:	b9 81       	ldd	r27, Y+1	; 0x01
 ea2:	ce 0f       	add	r28, r30
 ea4:	d1 1d       	adc	r29, r1
 ea6:	0f b6       	in	r0, 0x3f	; 63
 ea8:	f8 94       	cli
 eaa:	de bf       	out	0x3e, r29	; 62
 eac:	0f be       	out	0x3f, r0	; 63
 eae:	cd bf       	out	0x3d, r28	; 61
 eb0:	ed 01       	movw	r28, r26
 eb2:	08 95       	ret

00000eb4 <_exit>:
 eb4:	f8 94       	cli

00000eb6 <__stop_program>:
 eb6:	ff cf       	rjmp	.-2      	; 0xeb6 <__stop_program>
