
AutoWireCutter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800146  00800146  00000dbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001584  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c71  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000741  00000000  00000000  000030c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c3  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000948  00000000  00000000  00004127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_11>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_16>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	62 03       	mulsu	r22, r18
  b6:	81 03       	fmuls	r16, r17
  b8:	81 03       	fmuls	r16, r17
  ba:	81 03       	fmuls	r16, r17
  bc:	81 03       	fmuls	r16, r17
  be:	81 03       	fmuls	r16, r17
  c0:	81 03       	fmuls	r16, r17
  c2:	62 03       	mulsu	r22, r18
  c4:	81 03       	fmuls	r16, r17
  c6:	81 03       	fmuls	r16, r17
  c8:	81 03       	fmuls	r16, r17
  ca:	81 03       	fmuls	r16, r17
  cc:	81 03       	fmuls	r16, r17
  ce:	c5 02       	muls	r28, r21
  d0:	eb 02       	muls	r30, r27
  d2:	eb 02       	muls	r30, r27
  d4:	eb 02       	muls	r30, r27
  d6:	eb 02       	muls	r30, r27
  d8:	eb 02       	muls	r30, r27
  da:	eb 02       	muls	r30, r27
  dc:	eb 02       	muls	r30, r27
  de:	0b 03       	fmul	r16, r19
  e0:	42 03       	mulsu	r20, r18
  e2:	81 03       	fmuls	r16, r17
  e4:	81 03       	fmuls	r16, r17
  e6:	81 03       	fmuls	r16, r17
  e8:	81 03       	fmuls	r16, r17
  ea:	81 03       	fmuls	r16, r17
  ec:	81 03       	fmuls	r16, r17
  ee:	81 03       	fmuls	r16, r17
  f0:	62 03       	mulsu	r22, r18
  f2:	62 03       	mulsu	r22, r18
  f4:	62 03       	mulsu	r22, r18
  f6:	62 03       	mulsu	r22, r18

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d8 e0       	ldi	r29, 0x08	; 8
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	11 e0       	ldi	r17, 0x01	; 1
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	e2 ee       	ldi	r30, 0xE2	; 226
 10c:	fc e0       	ldi	r31, 0x0C	; 12
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
 110:	05 90       	lpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a6 34       	cpi	r26, 0x46	; 70
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	a6 e4       	ldi	r26, 0x46	; 70
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a5 36       	cpi	r26, 0x65	; 101
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
 12e:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_Z9printCHARcP6__file>:
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
		PORTD = (1 << PORTD2);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <_Z9printCHARcP6__file+0x4>
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <_ZN5Servo9IntializeEv>:
 14a:	56 9a       	sbi	0x0a, 6	; 10
 14c:	83 e8       	ldi	r24, 0x83	; 131
 14e:	84 bd       	out	0x24, r24	; 36
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 156:	83 e2       	ldi	r24, 0x23	; 35
 158:	87 bd       	out	0x27, r24	; 39
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	85 bd       	out	0x25, r24	; 37
 15e:	08 95       	ret

00000160 <__vector_16>:
 160:	18 95       	reti

00000162 <_ZN7DRV882510InitializeEv>:
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	8c 61       	ori	r24, 0x1C	; 28
 16a:	8a b9       	out	0x0a, r24	; 10
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 188:	08 95       	ret

0000018a <_ZN7DRV88259DirectionEb>:
	}	
}

void DRV8825::Direction(bool directionCont) { //Set Stepper Direction uses PORTD3
	if (directionCont) { //true is counter-clockwise, the direction the wire normally feeds
 18a:	66 23       	and	r22, r22
 18c:	31 f0       	breq	.+12     	; 0x19a <_ZN7DRV88259DirectionEb+0x10>
	dir = true;
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	22 83       	std	Z+2, r18	; 0x02
	PORTD = (1 << PORTD3);
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	8b b9       	out	0x0b, r24	; 11
 198:	08 95       	ret
	}
	else { //false is clockwise
	dir = false;
 19a:	fc 01       	movw	r30, r24
 19c:	12 82       	std	Z+2, r1	; 0x02
	PORTD = (0 << PORTD3);
 19e:	1b b8       	out	0x0b, r1	; 11
 1a0:	08 95       	ret

000001a2 <_ZN7DRV88259RuntostepEib>:
	}	
}

void DRV8825::Runtostep(int stepCount, bool directionCont) { //200*32 microsteps per revolution meaning 6400 is one revolution
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	8b 01       	movw	r16, r22
	UCSR0B = (0 << TXEN0) | (0 << RXEN0); /* Serial Transmit and Recieve Disable */
 1b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	TCCR1B |= (1 << CS11); //Timer pre-scaler set to div 8 START TIMER
 1ba:	e1 e8       	ldi	r30, 0x81	; 129
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 83       	st	Z, r24
	
	if (countStepper > 2000000000) {
 1c4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <countStepper>
 1c8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <countStepper+0x1>
 1cc:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <countStepper+0x2>
 1d0:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <countStepper+0x3>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	94 49       	sbci	r25, 0x94	; 148
 1d8:	a5 43       	sbci	r26, 0x35	; 53
 1da:	b7 47       	sbci	r27, 0x77	; 119
 1dc:	44 f0       	brlt	.+16     	; 0x1ee <_ZN7DRV88259RuntostepEib+0x4c>
		countStepper = 0;
 1de:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <countStepper>
 1e2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <countStepper+0x1>
 1e6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <countStepper+0x2>
 1ea:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <countStepper+0x3>
	}
	long countcurrent = countStepper;
 1ee:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <countStepper>
 1f2:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <countStepper+0x1>
 1f6:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <countStepper+0x2>
 1fa:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <countStepper+0x3>
	this->Direction(directionCont);
 1fe:	64 2f       	mov	r22, r20
 200:	ce 01       	movw	r24, r28
 202:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN7DRV88259DirectionEb>
	while (countStepper < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 206:	a8 01       	movw	r20, r16
 208:	11 0f       	add	r17, r17
 20a:	66 0b       	sbc	r22, r22
 20c:	77 0b       	sbc	r23, r23
 20e:	4c 0d       	add	r20, r12
 210:	5d 1d       	adc	r21, r13
 212:	6e 1d       	adc	r22, r14
 214:	7f 1d       	adc	r23, r15
 216:	4f 5f       	subi	r20, 0xFF	; 255
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	6f 4f       	sbci	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <countStepper>
 222:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <countStepper+0x1>
 226:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <countStepper+0x2>
 22a:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <countStepper+0x3>
 22e:	84 17       	cp	r24, r20
 230:	95 07       	cpc	r25, r21
 232:	a6 07       	cpc	r26, r22
 234:	b7 07       	cpc	r27, r23
 236:	84 f4       	brge	.+32     	; 0x258 <_ZN7DRV88259RuntostepEib+0xb6>
	//sei(); //Set I bit. aka set external interrupt
}

void DRV8825::Enable (bool enableCont) { //Enable Stepper Controller uses PORTD2
	if (enableCont) {
		enbl = true;
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	2b 83       	std	Y+3, r18	; 0x03
		PORTD = (0 << PORTD2);
 23c:	1b b8       	out	0x0b, r1	; 11
	if (countStepper > 2000000000) {
		countStepper = 0;
	}
	long countcurrent = countStepper;
	this->Direction(directionCont);
	while (countStepper < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 23e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <countStepper>
 242:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <countStepper+0x1>
 246:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <countStepper+0x2>
 24a:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <countStepper+0x3>
 24e:	84 17       	cp	r24, r20
 250:	95 07       	cpc	r25, r21
 252:	a6 07       	cpc	r26, r22
 254:	b7 07       	cpc	r27, r23
 256:	8c f3       	brlt	.-30     	; 0x23a <_ZN7DRV88259RuntostepEib+0x98>
	if (enableCont) {
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
 258:	1b 82       	std	Y+3, r1	; 0x03
		PORTD = (1 << PORTD2);
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	8b b9       	out	0x0b, r24	; 11
	while (countStepper < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
		this->Enable(true);
	}
	this->Enable(false);
	
	TCCR1B |= (0 << CS11); //Timer pre-scaler set to off STOP TIMER
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 83       	st	Z, r24
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Serial Transmit and Recieve Enable */
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	08 95       	ret

0000027e <__vector_11>:

ISR(TIMER1_COMPA_vect) //Runs every 10.5khz
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
	countStepper++; //take care not to overflow. Overflows in about 2 days.
 290:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <countStepper>
 294:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <countStepper+0x1>
 298:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <countStepper+0x2>
 29c:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <countStepper+0x3>
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	a1 1d       	adc	r26, r1
 2a4:	b1 1d       	adc	r27, r1
 2a6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <countStepper>
 2aa:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <countStepper+0x1>
 2ae:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <countStepper+0x2>
 2b2:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <countStepper+0x3>
	PORTD ^= (1 << PORTD4); //toggle port d4 for square wave
 2b6:	9b b1       	in	r25, 0x0b	; 11
 2b8:	80 e1       	ldi	r24, 0x10	; 16
 2ba:	89 27       	eor	r24, r25
 2bc:	8b b9       	out	0x0b, r24	; 11
}
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_Z6keypadv>:
		// Reset counter
		count = 0;
	}
}

unsigned char keypad(void){	// Define the function to return which key is pressed
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	68 97       	sbiw	r28, 0x18	; 24
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;	//which key is pressed?
	unsigned char portb_pin;
	
	unsigned char keypad_column[4] = {7,6,5,4};	//Pins b7, 6, 5, 4 of Port B control keypad columns
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	8a 83       	std	Y+2, r24	; 0x02
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	8b 83       	std	Y+3, r24	; 0x03
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char keypad_row[4] = {3,2,1,0};	// Pins b3, 2, 1, 0 of Port B control keypad rows
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	8d 83       	std	Y+5, r24	; 0x05
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	8e 83       	std	Y+6, r24	; 0x06
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	8f 83       	std	Y+7, r24	; 0x07
 30c:	18 86       	std	Y+8, r1	; 0x08
	unsigned char keypad_array[4][4] ={	//Array contains all
		{'1','2','3','A'},
		{'4','5','6','B'},
		{'7','8','9','C'},
		{'*','0','#','D'}
	};
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	e0 e0       	ldi	r30, 0x00	; 0
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	de 01       	movw	r26, r28
 316:	19 96       	adiw	r26, 0x09	; 9
 318:	01 90       	ld	r0, Z+
 31a:	0d 92       	st	X+, r0
 31c:	8a 95       	dec	r24
 31e:	e1 f7       	brne	.-8      	; 0x318 <_Z6keypadv+0x48>
 320:	8e 01       	movw	r16, r28
 322:	0f 5f       	subi	r16, 0xFF	; 255
 324:	1f 4f       	sbci	r17, 0xFF	; 255
 326:	a0 e0       	ldi	r26, 0x00	; 0
 328:	b0 e0       	ldi	r27, 0x00	; 0
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
 32a:	cc 24       	eor	r12, r12
 32c:	c3 94       	inc	r12
 32e:	d1 2c       	mov	r13, r1
 330:	7d 01       	movw	r14, r26
 332:	f8 01       	movw	r30, r16
 334:	c6 01       	movw	r24, r12
 336:	01 90       	ld	r0, Z+
 338:	02 c0       	rjmp	.+4      	; 0x33e <_Z6keypadv+0x6e>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <_Z6keypadv+0x6a>
 342:	8f 01       	movw	r16, r30
 344:	80 95       	com	r24
 346:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	8f e3       	ldi	r24, 0x3F	; 63
 34a:	9c e9       	ldi	r25, 0x9C	; 156
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <_Z6keypadv+0x7c>
 350:	00 c0       	rjmp	.+0      	; 0x352 <_Z6keypadv+0x82>
 352:	00 00       	nop
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
 354:	23 b1       	in	r18, 0x03	; 3
		for(row=0; row<4; row++){
			if((portb_pin & (1<<(keypad_row[row])))==0) {
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	c9 01       	movw	r24, r18
 35a:	0d 80       	ldd	r0, Y+5	; 0x05
 35c:	02 c0       	rjmp	.+4      	; 0x362 <_Z6keypadv+0x92>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <_Z6keypadv+0x8e>
 366:	bc 01       	movw	r22, r24
 368:	61 70       	andi	r22, 0x01	; 1
 36a:	77 27       	eor	r23, r23
 36c:	80 ff       	sbrs	r24, 0
 36e:	0e c0       	rjmp	.+28     	; 0x38c <_Z6keypadv+0xbc>
 370:	fe 01       	movw	r30, r28
 372:	36 96       	adiw	r30, 0x06	; 6
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	bc 01       	movw	r22, r24
 37a:	a9 01       	movw	r20, r18
 37c:	01 90       	ld	r0, Z+
 37e:	02 c0       	rjmp	.+4      	; 0x384 <_Z6keypadv+0xb4>
 380:	55 95       	asr	r21
 382:	47 95       	ror	r20
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <_Z6keypadv+0xb0>
 388:	40 fd       	sbrc	r20, 0
 38a:	0f c0       	rjmp	.+30     	; 0x3aa <_Z6keypadv+0xda>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
 38c:	ee 0c       	add	r14, r14
 38e:	ff 1c       	adc	r15, r15
 390:	ee 0c       	add	r14, r14
 392:	ff 1c       	adc	r15, r15
 394:	e1 e0       	ldi	r30, 0x01	; 1
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ec 0f       	add	r30, r28
 39a:	fd 1f       	adc	r31, r29
 39c:	ee 0e       	add	r14, r30
 39e:	ff 1e       	adc	r15, r31
 3a0:	f7 01       	movw	r30, r14
 3a2:	e6 0f       	add	r30, r22
 3a4:	f7 1f       	adc	r31, r23
 3a6:	80 85       	ldd	r24, Z+8	; 0x08
				return (key);	// return the answer, which key is pressed?
 3a8:	09 c0       	rjmp	.+18     	; 0x3bc <_Z6keypadv+0xec>
 3aa:	01 96       	adiw	r24, 0x01	; 1
	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
		for(row=0; row<4; row++){
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	91 05       	cpc	r25, r1
 3b0:	19 f7       	brne	.-58     	; 0x378 <_Z6keypadv+0xa8>
 3b2:	11 96       	adiw	r26, 0x01	; 1
	};
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
 3b4:	a4 30       	cpi	r26, 0x04	; 4
 3b6:	b1 05       	cpc	r27, r1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <_Z6keypadv+0xec>
 3ba:	ba cf       	rjmp	.-140    	; 0x330 <_Z6keypadv+0x60>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
				return (key);	// return the answer, which key is pressed?
			}
		}
	}
}
 3bc:	68 96       	adiw	r28, 0x18	; 24
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <main>:
check out http://savannah.nongnu.org/bugs/?36970. Function call moved to Main
for proper scope*/
//FILE uart_str = FDEV_SETUP_STREAM(printCHAR, NULL, _FDEV_SETUP_RW); /* Sets up "printf" */

int main(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	2b 97       	sbiw	r28, 0x0b	; 11
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
	static FILE uart_str;
	fdev_setup_stream(&uart_str,printCHAR,NULL,_FDEV_SETUP_WRITE);
 3ee:	e7 e4       	ldi	r30, 0x47	; 71
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	8b e9       	ldi	r24, 0x9B	; 155
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	91 87       	std	Z+9, r25	; 0x09
 3f8:	80 87       	std	Z+8, r24	; 0x08
 3fa:	13 86       	std	Z+11, r1	; 0x0b
 3fc:	12 86       	std	Z+10, r1	; 0x0a
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	83 83       	std	Z+3, r24	; 0x03
 402:	15 86       	std	Z+13, r1	; 0x0d
 404:	14 86       	std	Z+12, r1	; 0x0c
	
	DDRB = 0xF0;	//Configure Port B, Pins b7 to b4 are output. Pins b3 to b0 are input.
 406:	80 ef       	ldi	r24, 0xF0	; 240
 408:	84 b9       	out	0x04, r24	; 4
	// CTC for Timer 2 Setup
	//Edit by Dana, Set Timer to NOT use pin toggle, very important for proper Stepper function
	TCCR2A |= (1<<WGM21);	// Configure Timer 2 to CTC (Clear on timer compare) mode?????????????????????????????
 40a:	a0 eb       	ldi	r26, 0xB0	; 176
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	8c 91       	ld	r24, X
 410:	82 60       	ori	r24, 0x02	; 2
 412:	8c 93       	st	X, r24
	OCR2A = 260; // Set CTC Value for ~30HZ (From (8mHz Clock / 1024 prescaler) / (target of 30 HZ) = ~260)
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22)); 	// Setup Timer for 8 mHz with a 1024 prescale
 41a:	a1 eb       	ldi	r26, 0xB1	; 177
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	8c 91       	ld	r24, X
 420:	87 60       	ori	r24, 0x07	; 7
 422:	8c 93       	st	X, r24
	
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
 424:	f0 93 62 01 	sts	0x0162, r31	; 0x800162 <__iob+0x3>
 428:	e0 93 61 01 	sts	0x0161, r30	; 0x800161 <__iob+0x2>
#include "Servo.h"
#include "DRV8825.h"

static inline void ser_init() /* I'm told Static Inline functions are great for things that are called once (like initializing serial) */
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Serial Transmit and Recieve Enable */
 42c:	88 e1       	ldi	r24, 0x18	; 24
 42e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0 << USBS0) | (3 << UCSZ00); /* Set Stop Bit Length (1 Stop Bit) and Frame Length (8 data bits). No parity */
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = (unsigned char)(BAUD_PRESCALE >> 8); /* Load upper 8-bits of baud rate value into high byte of UBBR0 register */
 438:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE; /* Load lower 8-bits of the baud rate value into low byte of UBBR0 register */
 43c:	8f ec       	ldi	r24, 0xCF	; 207
 43e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	while ( !( UCSR0A & (1 << UDRE0)));
 442:	e0 ec       	ldi	r30, 0xC0	; 192
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	85 ff       	sbrs	r24, 5
 44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	; /* Wait for an empty Transmit Buffer */
	UDR0 = display_On; /* Turn LCD on with no blink and no cursor */
 44c:	06 ec       	ldi	r16, 0xC6	; 198
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	86 e1       	ldi	r24, 0x16	; 22
 452:	f8 01       	movw	r30, r16
 454:	80 83       	st	Z, r24
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
	
	// Serial Init, LCD Backlight on
	ser_init(); /* Serial Initialize */
	UDR0 = backlight_on; /* Turn on LCD backlight */
 456:	0f 2e       	mov	r0, r31
 458:	f1 e1       	ldi	r31, 0x11	; 17
 45a:	ff 2e       	mov	r15, r31
 45c:	f0 2d       	mov	r31, r0
 45e:	f0 82       	st	Z, r15
	
	//Create Servo Object and Init
	Servo MainServo;
	MainServo.Intialize();
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN5Servo9IntializeEv>
		
	//Create Stepper Object and Init
	DRV8825 MainStepper;
	MainStepper.Initialize();
 468:	ce 01       	movw	r24, r28
 46a:	06 96       	adiw	r24, 0x06	; 6
 46c:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN7DRV882510InitializeEv>
 470:	ff ef       	ldi	r31, 0xFF	; 255
 472:	29 e6       	ldi	r18, 0x69	; 105
 474:	88 e1       	ldi	r24, 0x18	; 24
 476:	f1 50       	subi	r31, 0x01	; 1
 478:	20 40       	sbci	r18, 0x00	; 0
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 480:	00 00       	nop
	
	_delay_ms(1000);
	
	//Set External Interrupts
	sei();
 482:	78 94       	sei
	
	// Scratchpad variable
	int digit;	/* Temporary variable to hold the value of which key is pressed */

	//Init LCD splash screen
	!( UCSR0A & (1 << UDRE0));
 484:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UDR0 = form_feed;
 488:	8c e0       	ldi	r24, 0x0C	; 12
 48a:	f8 01       	movw	r30, r16
 48c:	80 83       	st	Z, r24
 48e:	8f e0       	ldi	r24, 0x0F	; 15
 490:	97 e2       	ldi	r25, 0x27	; 39
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 498:	00 00       	nop
	_delay_ms(5);
	UDR0 = backlight_on;
 49a:	f0 82       	st	Z, r15
	printf("Welcome!");
 49c:	80 e1       	ldi	r24, 0x10	; 16
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	9f 93       	push	r25
 4a2:	8f 93       	push	r24
 4a4:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
		if (count >= 4) {
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 4ac:	aa 24       	eor	r10, r10
 4ae:	a3 94       	inc	r10
 4b0:	b1 2c       	mov	r11, r1
						_delay_ms(5);
						UDR0 = backlight_on;
						printf("Rotating Servo!");
						break;
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 4b2:	00 ec       	ldi	r16, 0xC0	; 192
 4b4:	10 e0       	ldi	r17, 0x00	; 0
						UDR0 = form_feed;
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f6 ec       	ldi	r31, 0xC6	; 198
 4ba:	ef 2e       	mov	r14, r31
 4bc:	f1 2c       	mov	r15, r1
 4be:	f0 2d       	mov	r31, r0
 4c0:	0f 2e       	mov	r0, r31
 4c2:	fc e0       	ldi	r31, 0x0C	; 12
 4c4:	2f 2e       	mov	r2, r31
 4c6:	f0 2d       	mov	r31, r0
						_delay_ms(5);
						UDR0 = backlight_on;
 4c8:	0f 2e       	mov	r0, r31
 4ca:	f1 e1       	ldi	r31, 0x11	; 17
 4cc:	3f 2e       	mov	r3, r31
 4ce:	f0 2d       	mov	r31, r0
						printf("The # is:\r");
 4d0:	0f 2e       	mov	r0, r31
 4d2:	fb e2       	ldi	r31, 0x2B	; 43
 4d4:	8f 2e       	mov	r8, r31
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	9f 2e       	mov	r9, r31
 4da:	f0 2d       	mov	r31, r0
void Servo::MoveToAngle(float angle){
	/* For 120Hz Signal 27% Duty Cycle amounts to an angle of 180deg
	/  9%  Duty Cycle amounts to an angle of 0deg
	/  Therefore, angle*((27-9)/180)+9 is the correct angle to duty cycle calculation
	*/
	dutyCycle = (angle*(18.0/180.0)+9.0); //STATIC VALUES HAVE TO BE FLOATS TO CALCULATE CORRECTLY! God damn.
 4dc:	0f 2e       	mov	r0, r31
 4de:	41 2c       	mov	r4, r1
 4e0:	51 2c       	mov	r5, r1
 4e2:	f8 e9       	ldi	r31, 0x98	; 152
 4e4:	6f 2e       	mov	r6, r31
 4e6:	f1 e4       	ldi	r31, 0x41	; 65
 4e8:	7f 2e       	mov	r7, r31
 4ea:	f0 2d       	mov	r31, r0
	UDR0 = backlight_on;
	printf("Welcome!");
	
	while(1)
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
 4ec:	b9 9b       	sbis	0x17, 1	; 23
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = ((~BUTTON_PIN & BUTTON_MASK) | (~BUTTON_PIN & BUTTON_MASK1) | (~BUTTON_PIN & BUTTON_MASK2) | (~BUTTON_PIN & BUTTON_MASK3)) != 0; // This is what allows multiple buttons to be debounced
 4f0:	43 b1       	in	r20, 0x03	; 3
 4f2:	33 b1       	in	r19, 0x03	; 3
 4f4:	93 b1       	in	r25, 0x03	; 3
 4f6:	23 b1       	in	r18, 0x03	; 3
	
	
	// Original Debounce
	if (current_state != button_state) {
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	40 95       	com	r20
 4fc:	50 95       	com	r21
 4fe:	ba 01       	movw	r22, r20
 500:	60 71       	andi	r22, 0x10	; 16
 502:	77 27       	eor	r23, r23
 504:	43 2f       	mov	r20, r19
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	40 95       	com	r20
 50a:	50 95       	com	r21
 50c:	40 72       	andi	r20, 0x20	; 32
 50e:	55 27       	eor	r21, r21
 510:	46 2b       	or	r20, r22
 512:	57 2b       	or	r21, r23
 514:	89 2f       	mov	r24, r25
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	80 74       	andi	r24, 0x40	; 64
 51e:	99 27       	eor	r25, r25
 520:	84 2b       	or	r24, r20
 522:	95 2b       	or	r25, r21
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	20 95       	com	r18
 528:	30 95       	com	r19
 52a:	20 78       	andi	r18, 0x80	; 128
 52c:	33 27       	eor	r19, r19
 52e:	82 2b       	or	r24, r18
 530:	93 2b       	or	r25, r19
 532:	89 2b       	or	r24, r25
 534:	71 f0       	breq	.+28     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
		// Button state is about to be changed, increase counter
		count++;
 536:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
		if (count >= 4) {
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	48 f0       	brcs	.+18     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 544:	b0 92 5e 01 	sts	0x015E, r11	; 0x80015e <button_down+0x1>
 548:	a0 92 5d 01 	sts	0x015D, r10	; 0x80015d <button_down>
			}
			count = 0;
 54c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
 550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
		}
		} else {
		// Reset counter
		count = 0;
 552:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
		{
			debounce();
			
			if (button_down)
 556:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <button_down>
 55a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <button_down+0x1>
 55e:	89 2b       	or	r24, r25
 560:	09 f4       	brne	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	cf c0       	rjmp	.+414    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
			{
				//printf("Hello");
				button_down = 0;
 564:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <button_down+0x1>
 568:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <button_down>
				digit = keypad();	/* Call the  function "keypad" to return the value of key pressed, and hold it with variable "digit" */
 56c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z6keypadv>
 570:	c8 2e       	mov	r12, r24
 572:	d1 2c       	mov	r13, r1
				switch(digit) /* Now evaluate value of "digit" to match with the LED pattern needed to be exported to Port B */
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	b3 97       	sbiw	r30, 0x23	; 35
 57a:	e2 32       	cpi	r30, 0x22	; 34
 57c:	f1 05       	cpc	r31, r1
 57e:	08 f0       	brcs	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 580:	c0 c0       	rjmp	.+384    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 582:	e6 5a       	subi	r30, 0xA6	; 166
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	0c 94 84 03 	jmp	0x708	; 0x708 <__tablejump2__>
				{
					case '0':
						MainStepper.Runtostep(6400,true);
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	79 e1       	ldi	r23, 0x19	; 25
 590:	ce 01       	movw	r24, r28
 592:	06 96       	adiw	r24, 0x06	; 6
 594:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN7DRV88259RuntostepEib>
 598:	ff ef       	ldi	r31, 0xFF	; 255
 59a:	21 ee       	ldi	r18, 0xE1	; 225
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	f1 50       	subi	r31, 0x01	; 1
 5a0:	20 40       	sbci	r18, 0x00	; 0
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	e1 f7       	brne	.-8      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a8:	00 00       	nop
						_delay_ms(200);
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	85 ff       	sbrs	r24, 5
 5b0:	fc cf       	rjmp	.-8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
						UDR0 = form_feed;
 5b2:	f7 01       	movw	r30, r14
 5b4:	20 82       	st	Z, r2
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	97 e2       	ldi	r25, 0x27	; 39
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5c0:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 5c2:	30 82       	st	Z, r3
						printf("Rotating Stepper!");
 5c4:	89 e1       	ldi	r24, 0x19	; 25
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
						break;
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	96 c0       	rjmp	.+300    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
					case '3':
					case '4':
					case '5':
					case '6':
					case '7':
						while ( !( UCSR0A & (1 << UDRE0))); /* Allows cases 1-7 to fall through the switch-case */
 5d6:	f8 01       	movw	r30, r16
 5d8:	80 81       	ld	r24, Z
 5da:	85 ff       	sbrs	r24, 5
 5dc:	fc cf       	rjmp	.-8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
						UDR0 = form_feed;
 5de:	f7 01       	movw	r30, r14
 5e0:	20 82       	st	Z, r2
 5e2:	8f e0       	ldi	r24, 0x0F	; 15
 5e4:	97 e2       	ldi	r25, 0x27	; 39
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5ec:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 5ee:	30 82       	st	Z, r3
						printf("The # is:\r");
 5f0:	9f 92       	push	r9
 5f2:	8f 92       	push	r8
 5f4:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
						printf("%c", digit);
 5f8:	c6 01       	movw	r24, r12
 5fa:	0e 94 a0 03 	call	0x740	; 0x740 <putchar>
 5fe:	ff e7       	ldi	r31, 0x7F	; 127
 600:	28 e3       	ldi	r18, 0x38	; 56
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	f1 50       	subi	r31, 0x01	; 1
 606:	20 40       	sbci	r18, 0x00	; 0
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60e:	00 00       	nop
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	76 c0       	rjmp	.+236    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
}	

void Servo::Enable(bool power) {
	if (power) 
	{
		TCCR0B = (1 << CS02); 
 616:	94 e0       	ldi	r25, 0x04	; 4
 618:	95 bd       	out	0x25, r25	; 37
 61a:	ef ef       	ldi	r30, 0xFF	; 255
 61c:	f1 ee       	ldi	r31, 0xE1	; 225
 61e:	24 e0       	ldi	r18, 0x04	; 4
 620:	e1 50       	subi	r30, 0x01	; 1
 622:	f0 40       	sbci	r31, 0x00	; 0
 624:	20 40       	sbci	r18, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 628:	00 c0       	rjmp	.+0      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 62a:	00 00       	nop
void Servo::MoveToAngle(float angle){
	/* For 120Hz Signal 27% Duty Cycle amounts to an angle of 180deg
	/  9%  Duty Cycle amounts to an angle of 0deg
	/  Therefore, angle*((27-9)/180)+9 is the correct angle to duty cycle calculation
	*/
	dutyCycle = (angle*(18.0/180.0)+9.0); //STATIC VALUES HAVE TO BE FLOATS TO CALCULATE CORRECTLY! God damn.
 62c:	40 92 59 01 	sts	0x0159, r4	; 0x800159 <dutyCycle>
 630:	50 92 5a 01 	sts	0x015A, r5	; 0x80015a <dutyCycle+0x1>
 634:	60 92 5b 01 	sts	0x015B, r6	; 0x80015b <dutyCycle+0x2>
 638:	70 92 5c 01 	sts	0x015C, r7	; 0x80015c <dutyCycle+0x3>
	OCR0A = (dutyCycle/100)*255; //Previously was in ISR but that would take more CPU usage. It's easy just to recalculate it here.
 63c:	80 e3       	ldi	r24, 0x30	; 48
 63e:	87 bd       	out	0x27, r24	; 39
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	e1 ee       	ldi	r30, 0xE1	; 225
 644:	f4 e0       	ldi	r31, 0x04	; 4
 646:	91 50       	subi	r25, 0x01	; 1
 648:	e0 40       	sbci	r30, 0x00	; 0
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	e1 f7       	brne	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 650:	00 00       	nop
	{
		TCCR0B = (1 << CS02); 
	} //Starts Timer
	else 
	{ 
		TCCR0B = (0 << CS02); 
 652:	15 bc       	out	0x25, r1	; 37
		PORTD |= (0 << PORTD6);
 654:	8b b1       	in	r24, 0x0b	; 11
 656:	8b b9       	out	0x0b, r24	; 11
						MainServo.Enable(true);
						_delay_ms(200);
						MainServo.MoveToAngle(100);
						_delay_ms(200);
						MainServo.Enable(false);
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 658:	f8 01       	movw	r30, r16
 65a:	80 81       	ld	r24, Z
 65c:	85 ff       	sbrs	r24, 5
 65e:	fc cf       	rjmp	.-8      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
						UDR0 = form_feed;
 660:	f7 01       	movw	r30, r14
 662:	20 82       	st	Z, r2
 664:	8f e0       	ldi	r24, 0x0F	; 15
 666:	97 e2       	ldi	r25, 0x27	; 39
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 66e:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 670:	30 82       	st	Z, r3
						printf("Rotating Servo!");
 672:	86 e3       	ldi	r24, 0x36	; 54
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	9f 93       	push	r25
 678:	8f 93       	push	r24
 67a:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
						break;
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	3f c0       	rjmp	.+126    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	85 ff       	sbrs	r24, 5
 68a:	fc cf       	rjmp	.-8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
						UDR0 = form_feed;
 68c:	f7 01       	movw	r30, r14
 68e:	20 82       	st	Z, r2
 690:	8f e0       	ldi	r24, 0x0F	; 15
 692:	97 e2       	ldi	r25, 0x27	; 39
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 698:	00 c0       	rjmp	.+0      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 69a:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 69c:	30 82       	st	Z, r3
						printf("The # is:\r");
 69e:	9f 92       	push	r9
 6a0:	8f 92       	push	r8
 6a2:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
						printf("%c", digit);
 6a6:	c6 01       	movw	r24, r12
 6a8:	0e 94 a0 03 	call	0x740	; 0x740 <putchar>
 6ac:	ff e7       	ldi	r31, 0x7F	; 127
 6ae:	28 e3       	ldi	r18, 0x38	; 56
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	f1 50       	subi	r31, 0x01	; 1
 6b4:	20 40       	sbci	r18, 0x00	; 0
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6bc:	00 00       	nop
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	1f c0       	rjmp	.+62     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
					case 'B':
					case 'C':
					case 'D':
					case '*':
					case '#':
					while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 6c4:	f8 01       	movw	r30, r16
 6c6:	80 81       	ld	r24, Z
 6c8:	85 ff       	sbrs	r24, 5
 6ca:	fc cf       	rjmp	.-8      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
					UDR0 = form_feed;
 6cc:	f7 01       	movw	r30, r14
 6ce:	20 82       	st	Z, r2
 6d0:	8f e0       	ldi	r24, 0x0F	; 15
 6d2:	97 e2       	ldi	r25, 0x27	; 39
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6da:	00 00       	nop
					_delay_ms(5);
					UDR0 = backlight_on;
 6dc:	30 82       	st	Z, r3
					printf("The # is:\r");
 6de:	9f 92       	push	r9
 6e0:	8f 92       	push	r8
 6e2:	0e 94 8a 03 	call	0x714	; 0x714 <printf>
					printf("%c", digit);
 6e6:	c6 01       	movw	r24, r12
 6e8:	0e 94 a0 03 	call	0x740	; 0x740 <putchar>
 6ec:	ff e7       	ldi	r31, 0x7F	; 127
 6ee:	28 e3       	ldi	r18, 0x38	; 56
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	f1 50       	subi	r31, 0x01	; 1
 6f4:	20 40       	sbci	r18, 0x00	; 0
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6fc:	00 00       	nop
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
					_delay_ms(50);
					break;
				}
			}
			TIFR2 = (1<<OCF2A); // Clear CTC flag by writing a logic 1 to it
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	87 bb       	out	0x17, r24	; 23
 706:	f2 ce       	rjmp	.-540    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>

00000708 <__tablejump2__>:
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	05 90       	lpm	r0, Z+
 70e:	f4 91       	lpm	r31, Z
 710:	e0 2d       	mov	r30, r0
 712:	09 94       	ijmp

00000714 <printf>:
 714:	a0 e0       	ldi	r26, 0x00	; 0
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	e0 e9       	ldi	r30, 0x90	; 144
 71a:	f3 e0       	ldi	r31, 0x03	; 3
 71c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__prologue_saves__+0x20>
 720:	ae 01       	movw	r20, r28
 722:	4b 5f       	subi	r20, 0xFB	; 251
 724:	5f 4f       	sbci	r21, 0xFF	; 255
 726:	fa 01       	movw	r30, r20
 728:	61 91       	ld	r22, Z+
 72a:	71 91       	ld	r23, Z+
 72c:	af 01       	movw	r20, r30
 72e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__iob+0x2>
 732:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <__iob+0x3>
 736:	0e 94 a7 03 	call	0x74e	; 0x74e <vfprintf>
 73a:	e2 e0       	ldi	r30, 0x02	; 2
 73c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__epilogue_restores__+0x20>

00000740 <putchar>:
 740:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <__iob+0x2>
 744:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <__iob+0x3>
 748:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 74c:	08 95       	ret

0000074e <vfprintf>:
 74e:	ab e0       	ldi	r26, 0x0B	; 11
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	ed ea       	ldi	r30, 0xAD	; 173
 754:	f3 e0       	ldi	r31, 0x03	; 3
 756:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__prologue_saves__>
 75a:	6c 01       	movw	r12, r24
 75c:	7b 01       	movw	r14, r22
 75e:	8a 01       	movw	r16, r20
 760:	fc 01       	movw	r30, r24
 762:	17 82       	std	Z+7, r1	; 0x07
 764:	16 82       	std	Z+6, r1	; 0x06
 766:	83 81       	ldd	r24, Z+3	; 0x03
 768:	81 ff       	sbrs	r24, 1
 76a:	cc c1       	rjmp	.+920    	; 0xb04 <__stack+0x205>
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	3c 01       	movw	r6, r24
 772:	f6 01       	movw	r30, r12
 774:	93 81       	ldd	r25, Z+3	; 0x03
 776:	f7 01       	movw	r30, r14
 778:	93 fd       	sbrc	r25, 3
 77a:	85 91       	lpm	r24, Z+
 77c:	93 ff       	sbrs	r25, 3
 77e:	81 91       	ld	r24, Z+
 780:	7f 01       	movw	r14, r30
 782:	88 23       	and	r24, r24
 784:	09 f4       	brne	.+2      	; 0x788 <vfprintf+0x3a>
 786:	ba c1       	rjmp	.+884    	; 0xafc <__stack+0x1fd>
 788:	85 32       	cpi	r24, 0x25	; 37
 78a:	39 f4       	brne	.+14     	; 0x79a <vfprintf+0x4c>
 78c:	93 fd       	sbrc	r25, 3
 78e:	85 91       	lpm	r24, Z+
 790:	93 ff       	sbrs	r25, 3
 792:	81 91       	ld	r24, Z+
 794:	7f 01       	movw	r14, r30
 796:	85 32       	cpi	r24, 0x25	; 37
 798:	29 f4       	brne	.+10     	; 0x7a4 <vfprintf+0x56>
 79a:	b6 01       	movw	r22, r12
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 7a2:	e7 cf       	rjmp	.-50     	; 0x772 <vfprintf+0x24>
 7a4:	91 2c       	mov	r9, r1
 7a6:	21 2c       	mov	r2, r1
 7a8:	31 2c       	mov	r3, r1
 7aa:	ff e1       	ldi	r31, 0x1F	; 31
 7ac:	f3 15       	cp	r31, r3
 7ae:	d8 f0       	brcs	.+54     	; 0x7e6 <vfprintf+0x98>
 7b0:	8b 32       	cpi	r24, 0x2B	; 43
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <vfprintf+0x84>
 7b4:	38 f4       	brcc	.+14     	; 0x7c4 <vfprintf+0x76>
 7b6:	80 32       	cpi	r24, 0x20	; 32
 7b8:	79 f0       	breq	.+30     	; 0x7d8 <vfprintf+0x8a>
 7ba:	83 32       	cpi	r24, 0x23	; 35
 7bc:	a1 f4       	brne	.+40     	; 0x7e6 <vfprintf+0x98>
 7be:	23 2d       	mov	r18, r3
 7c0:	20 61       	ori	r18, 0x10	; 16
 7c2:	1d c0       	rjmp	.+58     	; 0x7fe <vfprintf+0xb0>
 7c4:	8d 32       	cpi	r24, 0x2D	; 45
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <vfprintf+0x92>
 7c8:	80 33       	cpi	r24, 0x30	; 48
 7ca:	69 f4       	brne	.+26     	; 0x7e6 <vfprintf+0x98>
 7cc:	23 2d       	mov	r18, r3
 7ce:	21 60       	ori	r18, 0x01	; 1
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <vfprintf+0xb0>
 7d2:	83 2d       	mov	r24, r3
 7d4:	82 60       	ori	r24, 0x02	; 2
 7d6:	38 2e       	mov	r3, r24
 7d8:	e3 2d       	mov	r30, r3
 7da:	e4 60       	ori	r30, 0x04	; 4
 7dc:	3e 2e       	mov	r3, r30
 7de:	2a c0       	rjmp	.+84     	; 0x834 <vfprintf+0xe6>
 7e0:	f3 2d       	mov	r31, r3
 7e2:	f8 60       	ori	r31, 0x08	; 8
 7e4:	1d c0       	rjmp	.+58     	; 0x820 <vfprintf+0xd2>
 7e6:	37 fc       	sbrc	r3, 7
 7e8:	2d c0       	rjmp	.+90     	; 0x844 <vfprintf+0xf6>
 7ea:	20 ed       	ldi	r18, 0xD0	; 208
 7ec:	28 0f       	add	r18, r24
 7ee:	2a 30       	cpi	r18, 0x0A	; 10
 7f0:	40 f0       	brcs	.+16     	; 0x802 <vfprintf+0xb4>
 7f2:	8e 32       	cpi	r24, 0x2E	; 46
 7f4:	b9 f4       	brne	.+46     	; 0x824 <vfprintf+0xd6>
 7f6:	36 fc       	sbrc	r3, 6
 7f8:	81 c1       	rjmp	.+770    	; 0xafc <__stack+0x1fd>
 7fa:	23 2d       	mov	r18, r3
 7fc:	20 64       	ori	r18, 0x40	; 64
 7fe:	32 2e       	mov	r3, r18
 800:	19 c0       	rjmp	.+50     	; 0x834 <vfprintf+0xe6>
 802:	36 fe       	sbrs	r3, 6
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0xc4>
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	98 9e       	mul	r9, r24
 80a:	20 0d       	add	r18, r0
 80c:	11 24       	eor	r1, r1
 80e:	92 2e       	mov	r9, r18
 810:	11 c0       	rjmp	.+34     	; 0x834 <vfprintf+0xe6>
 812:	ea e0       	ldi	r30, 0x0A	; 10
 814:	2e 9e       	mul	r2, r30
 816:	20 0d       	add	r18, r0
 818:	11 24       	eor	r1, r1
 81a:	22 2e       	mov	r2, r18
 81c:	f3 2d       	mov	r31, r3
 81e:	f0 62       	ori	r31, 0x20	; 32
 820:	3f 2e       	mov	r3, r31
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0xe6>
 824:	8c 36       	cpi	r24, 0x6C	; 108
 826:	21 f4       	brne	.+8      	; 0x830 <vfprintf+0xe2>
 828:	83 2d       	mov	r24, r3
 82a:	80 68       	ori	r24, 0x80	; 128
 82c:	38 2e       	mov	r3, r24
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0xe6>
 830:	88 36       	cpi	r24, 0x68	; 104
 832:	41 f4       	brne	.+16     	; 0x844 <vfprintf+0xf6>
 834:	f7 01       	movw	r30, r14
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	7f 01       	movw	r14, r30
 840:	81 11       	cpse	r24, r1
 842:	b3 cf       	rjmp	.-154    	; 0x7aa <vfprintf+0x5c>
 844:	98 2f       	mov	r25, r24
 846:	9f 7d       	andi	r25, 0xDF	; 223
 848:	95 54       	subi	r25, 0x45	; 69
 84a:	93 30       	cpi	r25, 0x03	; 3
 84c:	28 f4       	brcc	.+10     	; 0x858 <vfprintf+0x10a>
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	9f e3       	ldi	r25, 0x3F	; 63
 854:	99 83       	std	Y+1, r25	; 0x01
 856:	0d c0       	rjmp	.+26     	; 0x872 <vfprintf+0x124>
 858:	83 36       	cpi	r24, 0x63	; 99
 85a:	31 f0       	breq	.+12     	; 0x868 <vfprintf+0x11a>
 85c:	83 37       	cpi	r24, 0x73	; 115
 85e:	71 f0       	breq	.+28     	; 0x87c <vfprintf+0x12e>
 860:	83 35       	cpi	r24, 0x53	; 83
 862:	09 f0       	breq	.+2      	; 0x866 <vfprintf+0x118>
 864:	59 c0       	rjmp	.+178    	; 0x918 <__stack+0x19>
 866:	21 c0       	rjmp	.+66     	; 0x8aa <vfprintf+0x15c>
 868:	f8 01       	movw	r30, r16
 86a:	80 81       	ld	r24, Z
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	0e 5f       	subi	r16, 0xFE	; 254
 870:	1f 4f       	sbci	r17, 0xFF	; 255
 872:	88 24       	eor	r8, r8
 874:	83 94       	inc	r8
 876:	91 2c       	mov	r9, r1
 878:	53 01       	movw	r10, r6
 87a:	13 c0       	rjmp	.+38     	; 0x8a2 <vfprintf+0x154>
 87c:	28 01       	movw	r4, r16
 87e:	f2 e0       	ldi	r31, 0x02	; 2
 880:	4f 0e       	add	r4, r31
 882:	51 1c       	adc	r5, r1
 884:	f8 01       	movw	r30, r16
 886:	a0 80       	ld	r10, Z
 888:	b1 80       	ldd	r11, Z+1	; 0x01
 88a:	36 fe       	sbrs	r3, 6
 88c:	03 c0       	rjmp	.+6      	; 0x894 <vfprintf+0x146>
 88e:	69 2d       	mov	r22, r9
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x14a>
 894:	6f ef       	ldi	r22, 0xFF	; 255
 896:	7f ef       	ldi	r23, 0xFF	; 255
 898:	c5 01       	movw	r24, r10
 89a:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen>
 89e:	4c 01       	movw	r8, r24
 8a0:	82 01       	movw	r16, r4
 8a2:	f3 2d       	mov	r31, r3
 8a4:	ff 77       	andi	r31, 0x7F	; 127
 8a6:	3f 2e       	mov	r3, r31
 8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <vfprintf+0x188>
 8aa:	28 01       	movw	r4, r16
 8ac:	22 e0       	ldi	r18, 0x02	; 2
 8ae:	42 0e       	add	r4, r18
 8b0:	51 1c       	adc	r5, r1
 8b2:	f8 01       	movw	r30, r16
 8b4:	a0 80       	ld	r10, Z
 8b6:	b1 80       	ldd	r11, Z+1	; 0x01
 8b8:	36 fe       	sbrs	r3, 6
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <vfprintf+0x174>
 8bc:	69 2d       	mov	r22, r9
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x178>
 8c2:	6f ef       	ldi	r22, 0xFF	; 255
 8c4:	7f ef       	ldi	r23, 0xFF	; 255
 8c6:	c5 01       	movw	r24, r10
 8c8:	0e 94 88 05 	call	0xb10	; 0xb10 <strnlen_P>
 8cc:	4c 01       	movw	r8, r24
 8ce:	f3 2d       	mov	r31, r3
 8d0:	f0 68       	ori	r31, 0x80	; 128
 8d2:	3f 2e       	mov	r3, r31
 8d4:	82 01       	movw	r16, r4
 8d6:	33 fc       	sbrc	r3, 3
 8d8:	1b c0       	rjmp	.+54     	; 0x910 <__stack+0x11>
 8da:	82 2d       	mov	r24, r2
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	88 16       	cp	r8, r24
 8e0:	99 06       	cpc	r9, r25
 8e2:	b0 f4       	brcc	.+44     	; 0x910 <__stack+0x11>
 8e4:	b6 01       	movw	r22, r12
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 8ee:	2a 94       	dec	r2
 8f0:	f4 cf       	rjmp	.-24     	; 0x8da <vfprintf+0x18c>
 8f2:	f5 01       	movw	r30, r10
 8f4:	37 fc       	sbrc	r3, 7
 8f6:	85 91       	lpm	r24, Z+
 8f8:	37 fe       	sbrs	r3, 7
 8fa:	81 91       	ld	r24, Z+
 8fc:	5f 01       	movw	r10, r30
 8fe:	b6 01       	movw	r22, r12
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 906:	21 10       	cpse	r2, r1
 908:	2a 94       	dec	r2
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	82 1a       	sub	r8, r18
 90e:	91 08       	sbc	r9, r1
 910:	81 14       	cp	r8, r1
 912:	91 04       	cpc	r9, r1
 914:	71 f7       	brne	.-36     	; 0x8f2 <vfprintf+0x1a4>
 916:	e8 c0       	rjmp	.+464    	; 0xae8 <__stack+0x1e9>
 918:	84 36       	cpi	r24, 0x64	; 100
 91a:	11 f0       	breq	.+4      	; 0x920 <__stack+0x21>
 91c:	89 36       	cpi	r24, 0x69	; 105
 91e:	41 f5       	brne	.+80     	; 0x970 <__stack+0x71>
 920:	f8 01       	movw	r30, r16
 922:	37 fe       	sbrs	r3, 7
 924:	07 c0       	rjmp	.+14     	; 0x934 <__stack+0x35>
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	82 81       	ldd	r24, Z+2	; 0x02
 92c:	93 81       	ldd	r25, Z+3	; 0x03
 92e:	0c 5f       	subi	r16, 0xFC	; 252
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	08 c0       	rjmp	.+16     	; 0x944 <__stack+0x45>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	07 2e       	mov	r0, r23
 93a:	00 0c       	add	r0, r0
 93c:	88 0b       	sbc	r24, r24
 93e:	99 0b       	sbc	r25, r25
 940:	0e 5f       	subi	r16, 0xFE	; 254
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	f3 2d       	mov	r31, r3
 946:	ff 76       	andi	r31, 0x6F	; 111
 948:	3f 2e       	mov	r3, r31
 94a:	97 ff       	sbrs	r25, 7
 94c:	09 c0       	rjmp	.+18     	; 0x960 <__stack+0x61>
 94e:	90 95       	com	r25
 950:	80 95       	com	r24
 952:	70 95       	com	r23
 954:	61 95       	neg	r22
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	f0 68       	ori	r31, 0x80	; 128
 95e:	3f 2e       	mov	r3, r31
 960:	2a e0       	ldi	r18, 0x0A	; 10
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	a3 01       	movw	r20, r6
 966:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 96a:	88 2e       	mov	r8, r24
 96c:	86 18       	sub	r8, r6
 96e:	45 c0       	rjmp	.+138    	; 0x9fa <__stack+0xfb>
 970:	85 37       	cpi	r24, 0x75	; 117
 972:	31 f4       	brne	.+12     	; 0x980 <__stack+0x81>
 974:	23 2d       	mov	r18, r3
 976:	2f 7e       	andi	r18, 0xEF	; 239
 978:	b2 2e       	mov	r11, r18
 97a:	2a e0       	ldi	r18, 0x0A	; 10
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	25 c0       	rjmp	.+74     	; 0x9ca <__stack+0xcb>
 980:	93 2d       	mov	r25, r3
 982:	99 7f       	andi	r25, 0xF9	; 249
 984:	b9 2e       	mov	r11, r25
 986:	8f 36       	cpi	r24, 0x6F	; 111
 988:	c1 f0       	breq	.+48     	; 0x9ba <__stack+0xbb>
 98a:	18 f4       	brcc	.+6      	; 0x992 <__stack+0x93>
 98c:	88 35       	cpi	r24, 0x58	; 88
 98e:	79 f0       	breq	.+30     	; 0x9ae <__stack+0xaf>
 990:	b5 c0       	rjmp	.+362    	; 0xafc <__stack+0x1fd>
 992:	80 37       	cpi	r24, 0x70	; 112
 994:	19 f0       	breq	.+6      	; 0x99c <__stack+0x9d>
 996:	88 37       	cpi	r24, 0x78	; 120
 998:	21 f0       	breq	.+8      	; 0x9a2 <__stack+0xa3>
 99a:	b0 c0       	rjmp	.+352    	; 0xafc <__stack+0x1fd>
 99c:	e9 2f       	mov	r30, r25
 99e:	e0 61       	ori	r30, 0x10	; 16
 9a0:	be 2e       	mov	r11, r30
 9a2:	b4 fe       	sbrs	r11, 4
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__stack+0xc1>
 9a6:	fb 2d       	mov	r31, r11
 9a8:	f4 60       	ori	r31, 0x04	; 4
 9aa:	bf 2e       	mov	r11, r31
 9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__stack+0xc1>
 9ae:	34 fe       	sbrs	r3, 4
 9b0:	0a c0       	rjmp	.+20     	; 0x9c6 <__stack+0xc7>
 9b2:	29 2f       	mov	r18, r25
 9b4:	26 60       	ori	r18, 0x06	; 6
 9b6:	b2 2e       	mov	r11, r18
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
 9ba:	28 e0       	ldi	r18, 0x08	; 8
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <__stack+0xcb>
 9c0:	20 e1       	ldi	r18, 0x10	; 16
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	20 e1       	ldi	r18, 0x10	; 16
 9c8:	32 e0       	ldi	r19, 0x02	; 2
 9ca:	f8 01       	movw	r30, r16
 9cc:	b7 fe       	sbrs	r11, 7
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__stack+0xdf>
 9d0:	60 81       	ld	r22, Z
 9d2:	71 81       	ldd	r23, Z+1	; 0x01
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	93 81       	ldd	r25, Z+3	; 0x03
 9d8:	0c 5f       	subi	r16, 0xFC	; 252
 9da:	1f 4f       	sbci	r17, 0xFF	; 255
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
 9de:	60 81       	ld	r22, Z
 9e0:	71 81       	ldd	r23, Z+1	; 0x01
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 5f       	subi	r16, 0xFE	; 254
 9e8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ea:	a3 01       	movw	r20, r6
 9ec:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 9f0:	88 2e       	mov	r8, r24
 9f2:	86 18       	sub	r8, r6
 9f4:	fb 2d       	mov	r31, r11
 9f6:	ff 77       	andi	r31, 0x7F	; 127
 9f8:	3f 2e       	mov	r3, r31
 9fa:	36 fe       	sbrs	r3, 6
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <__stack+0x119>
 9fe:	23 2d       	mov	r18, r3
 a00:	2e 7f       	andi	r18, 0xFE	; 254
 a02:	a2 2e       	mov	r10, r18
 a04:	89 14       	cp	r8, r9
 a06:	58 f4       	brcc	.+22     	; 0xa1e <__stack+0x11f>
 a08:	34 fe       	sbrs	r3, 4
 a0a:	0b c0       	rjmp	.+22     	; 0xa22 <__stack+0x123>
 a0c:	32 fc       	sbrc	r3, 2
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__stack+0x123>
 a10:	83 2d       	mov	r24, r3
 a12:	8e 7e       	andi	r24, 0xEE	; 238
 a14:	a8 2e       	mov	r10, r24
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <__stack+0x123>
 a18:	b8 2c       	mov	r11, r8
 a1a:	a3 2c       	mov	r10, r3
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <__stack+0x125>
 a1e:	b8 2c       	mov	r11, r8
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <__stack+0x125>
 a22:	b9 2c       	mov	r11, r9
 a24:	a4 fe       	sbrs	r10, 4
 a26:	0f c0       	rjmp	.+30     	; 0xa46 <__stack+0x147>
 a28:	fe 01       	movw	r30, r28
 a2a:	e8 0d       	add	r30, r8
 a2c:	f1 1d       	adc	r31, r1
 a2e:	80 81       	ld	r24, Z
 a30:	80 33       	cpi	r24, 0x30	; 48
 a32:	21 f4       	brne	.+8      	; 0xa3c <__stack+0x13d>
 a34:	9a 2d       	mov	r25, r10
 a36:	99 7e       	andi	r25, 0xE9	; 233
 a38:	a9 2e       	mov	r10, r25
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__stack+0x14f>
 a3c:	a2 fe       	sbrs	r10, 2
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <__stack+0x14d>
 a40:	b3 94       	inc	r11
 a42:	b3 94       	inc	r11
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <__stack+0x14f>
 a46:	8a 2d       	mov	r24, r10
 a48:	86 78       	andi	r24, 0x86	; 134
 a4a:	09 f0       	breq	.+2      	; 0xa4e <__stack+0x14f>
 a4c:	b3 94       	inc	r11
 a4e:	a3 fc       	sbrc	r10, 3
 a50:	11 c0       	rjmp	.+34     	; 0xa74 <__stack+0x175>
 a52:	a0 fe       	sbrs	r10, 0
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <__stack+0x163>
 a56:	b2 14       	cp	r11, r2
 a58:	88 f4       	brcc	.+34     	; 0xa7c <__stack+0x17d>
 a5a:	28 0c       	add	r2, r8
 a5c:	92 2c       	mov	r9, r2
 a5e:	9b 18       	sub	r9, r11
 a60:	0e c0       	rjmp	.+28     	; 0xa7e <__stack+0x17f>
 a62:	b2 14       	cp	r11, r2
 a64:	60 f4       	brcc	.+24     	; 0xa7e <__stack+0x17f>
 a66:	b6 01       	movw	r22, r12
 a68:	80 e2       	ldi	r24, 0x20	; 32
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a70:	b3 94       	inc	r11
 a72:	f7 cf       	rjmp	.-18     	; 0xa62 <__stack+0x163>
 a74:	b2 14       	cp	r11, r2
 a76:	18 f4       	brcc	.+6      	; 0xa7e <__stack+0x17f>
 a78:	2b 18       	sub	r2, r11
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__stack+0x181>
 a7c:	98 2c       	mov	r9, r8
 a7e:	21 2c       	mov	r2, r1
 a80:	a4 fe       	sbrs	r10, 4
 a82:	10 c0       	rjmp	.+32     	; 0xaa4 <__stack+0x1a5>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a8e:	a2 fe       	sbrs	r10, 2
 a90:	17 c0       	rjmp	.+46     	; 0xac0 <__stack+0x1c1>
 a92:	a1 fc       	sbrc	r10, 1
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <__stack+0x19d>
 a96:	88 e7       	ldi	r24, 0x78	; 120
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <__stack+0x1a1>
 a9c:	88 e5       	ldi	r24, 0x58	; 88
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	b6 01       	movw	r22, r12
 aa2:	0c c0       	rjmp	.+24     	; 0xabc <__stack+0x1bd>
 aa4:	8a 2d       	mov	r24, r10
 aa6:	86 78       	andi	r24, 0x86	; 134
 aa8:	59 f0       	breq	.+22     	; 0xac0 <__stack+0x1c1>
 aaa:	a1 fe       	sbrs	r10, 1
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <__stack+0x1b3>
 aae:	8b e2       	ldi	r24, 0x2B	; 43
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__stack+0x1b5>
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	a7 fc       	sbrc	r10, 7
 ab6:	8d e2       	ldi	r24, 0x2D	; 45
 ab8:	b6 01       	movw	r22, r12
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ac0:	89 14       	cp	r8, r9
 ac2:	38 f4       	brcc	.+14     	; 0xad2 <__stack+0x1d3>
 ac4:	b6 01       	movw	r22, r12
 ac6:	80 e3       	ldi	r24, 0x30	; 48
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ace:	9a 94       	dec	r9
 ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <__stack+0x1c1>
 ad2:	8a 94       	dec	r8
 ad4:	f3 01       	movw	r30, r6
 ad6:	e8 0d       	add	r30, r8
 ad8:	f1 1d       	adc	r31, r1
 ada:	80 81       	ld	r24, Z
 adc:	b6 01       	movw	r22, r12
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ae4:	81 10       	cpse	r8, r1
 ae6:	f5 cf       	rjmp	.-22     	; 0xad2 <__stack+0x1d3>
 ae8:	22 20       	and	r2, r2
 aea:	09 f4       	brne	.+2      	; 0xaee <__stack+0x1ef>
 aec:	42 ce       	rjmp	.-892    	; 0x772 <vfprintf+0x24>
 aee:	b6 01       	movw	r22, r12
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 af8:	2a 94       	dec	r2
 afa:	f6 cf       	rjmp	.-20     	; 0xae8 <__stack+0x1e9>
 afc:	f6 01       	movw	r30, r12
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x209>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	2b 96       	adiw	r28, 0x0b	; 11
 b0a:	e2 e1       	ldi	r30, 0x12	; 18
 b0c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__epilogue_restores__>

00000b10 <strnlen_P>:
 b10:	fc 01       	movw	r30, r24
 b12:	05 90       	lpm	r0, Z+
 b14:	61 50       	subi	r22, 0x01	; 1
 b16:	70 40       	sbci	r23, 0x00	; 0
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen_P+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <strnlen>:
 b26:	fc 01       	movw	r30, r24
 b28:	61 50       	subi	r22, 0x01	; 1
 b2a:	70 40       	sbci	r23, 0x00	; 0
 b2c:	01 90       	ld	r0, Z+
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <fputc>:
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	fb 01       	movw	r30, r22
 b46:	23 81       	ldd	r18, Z+3	; 0x03
 b48:	21 fd       	sbrc	r18, 1
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <fputc+0x16>
 b4c:	8f ef       	ldi	r24, 0xFF	; 255
 b4e:	9f ef       	ldi	r25, 0xFF	; 255
 b50:	2c c0       	rjmp	.+88     	; 0xbaa <fputc+0x6e>
 b52:	22 ff       	sbrs	r18, 2
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <fputc+0x46>
 b56:	46 81       	ldd	r20, Z+6	; 0x06
 b58:	57 81       	ldd	r21, Z+7	; 0x07
 b5a:	24 81       	ldd	r18, Z+4	; 0x04
 b5c:	35 81       	ldd	r19, Z+5	; 0x05
 b5e:	42 17       	cp	r20, r18
 b60:	53 07       	cpc	r21, r19
 b62:	44 f4       	brge	.+16     	; 0xb74 <fputc+0x38>
 b64:	a0 81       	ld	r26, Z
 b66:	b1 81       	ldd	r27, Z+1	; 0x01
 b68:	9d 01       	movw	r18, r26
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	31 83       	std	Z+1, r19	; 0x01
 b70:	20 83       	st	Z, r18
 b72:	8c 93       	st	X, r24
 b74:	26 81       	ldd	r18, Z+6	; 0x06
 b76:	37 81       	ldd	r19, Z+7	; 0x07
 b78:	2f 5f       	subi	r18, 0xFF	; 255
 b7a:	3f 4f       	sbci	r19, 0xFF	; 255
 b7c:	37 83       	std	Z+7, r19	; 0x07
 b7e:	26 83       	std	Z+6, r18	; 0x06
 b80:	14 c0       	rjmp	.+40     	; 0xbaa <fputc+0x6e>
 b82:	8b 01       	movw	r16, r22
 b84:	ec 01       	movw	r28, r24
 b86:	fb 01       	movw	r30, r22
 b88:	00 84       	ldd	r0, Z+8	; 0x08
 b8a:	f1 85       	ldd	r31, Z+9	; 0x09
 b8c:	e0 2d       	mov	r30, r0
 b8e:	09 95       	icall
 b90:	89 2b       	or	r24, r25
 b92:	e1 f6       	brne	.-72     	; 0xb4c <fputc+0x10>
 b94:	d8 01       	movw	r26, r16
 b96:	16 96       	adiw	r26, 0x06	; 6
 b98:	8d 91       	ld	r24, X+
 b9a:	9c 91       	ld	r25, X
 b9c:	17 97       	sbiw	r26, 0x07	; 7
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	17 96       	adiw	r26, 0x07	; 7
 ba2:	9c 93       	st	X, r25
 ba4:	8e 93       	st	-X, r24
 ba6:	16 97       	sbiw	r26, 0x06	; 6
 ba8:	ce 01       	movw	r24, r28
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	08 95       	ret

00000bb4 <__ultoa_invert>:
 bb4:	fa 01       	movw	r30, r20
 bb6:	aa 27       	eor	r26, r26
 bb8:	28 30       	cpi	r18, 0x08	; 8
 bba:	51 f1       	breq	.+84     	; 0xc10 <__ultoa_invert+0x5c>
 bbc:	20 31       	cpi	r18, 0x10	; 16
 bbe:	81 f1       	breq	.+96     	; 0xc20 <__ultoa_invert+0x6c>
 bc0:	e8 94       	clt
 bc2:	6f 93       	push	r22
 bc4:	6e 7f       	andi	r22, 0xFE	; 254
 bc6:	6e 5f       	subi	r22, 0xFE	; 254
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	af 4f       	sbci	r26, 0xFF	; 255
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0x9c>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	3c d0       	rcall	.+120    	; 0xc50 <__ultoa_invert+0x9c>
 bd8:	67 0f       	add	r22, r23
 bda:	78 1f       	adc	r23, r24
 bdc:	89 1f       	adc	r24, r25
 bde:	9a 1f       	adc	r25, r26
 be0:	a1 1d       	adc	r26, r1
 be2:	68 0f       	add	r22, r24
 be4:	79 1f       	adc	r23, r25
 be6:	8a 1f       	adc	r24, r26
 be8:	91 1d       	adc	r25, r1
 bea:	a1 1d       	adc	r26, r1
 bec:	6a 0f       	add	r22, r26
 bee:	71 1d       	adc	r23, r1
 bf0:	81 1d       	adc	r24, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	20 d0       	rcall	.+64     	; 0xc38 <__ultoa_invert+0x84>
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__ultoa_invert+0x48>
 bfa:	68 94       	set
 bfc:	3f 91       	pop	r19
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	26 9f       	mul	r18, r22
 c02:	11 24       	eor	r1, r1
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	de f6       	brtc	.-74     	; 0xbc2 <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x86>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x5c>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x58>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x7c>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x84>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x6c>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x58>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x86>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa2>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <__prologue_saves__>:
 c70:	2f 92       	push	r2
 c72:	3f 92       	push	r3
 c74:	4f 92       	push	r4
 c76:	5f 92       	push	r5
 c78:	6f 92       	push	r6
 c7a:	7f 92       	push	r7
 c7c:	8f 92       	push	r8
 c7e:	9f 92       	push	r9
 c80:	af 92       	push	r10
 c82:	bf 92       	push	r11
 c84:	cf 92       	push	r12
 c86:	df 92       	push	r13
 c88:	ef 92       	push	r14
 c8a:	ff 92       	push	r15
 c8c:	0f 93       	push	r16
 c8e:	1f 93       	push	r17
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	ca 1b       	sub	r28, r26
 c9a:	db 0b       	sbc	r29, r27
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	09 94       	ijmp

00000ca8 <__epilogue_restores__>:
 ca8:	2a 88       	ldd	r2, Y+18	; 0x12
 caa:	39 88       	ldd	r3, Y+17	; 0x11
 cac:	48 88       	ldd	r4, Y+16	; 0x10
 cae:	5f 84       	ldd	r5, Y+15	; 0x0f
 cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cba:	b9 84       	ldd	r11, Y+9	; 0x09
 cbc:	c8 84       	ldd	r12, Y+8	; 0x08
 cbe:	df 80       	ldd	r13, Y+7	; 0x07
 cc0:	ee 80       	ldd	r14, Y+6	; 0x06
 cc2:	fd 80       	ldd	r15, Y+5	; 0x05
 cc4:	0c 81       	ldd	r16, Y+4	; 0x04
 cc6:	1b 81       	ldd	r17, Y+3	; 0x03
 cc8:	aa 81       	ldd	r26, Y+2	; 0x02
 cca:	b9 81       	ldd	r27, Y+1	; 0x01
 ccc:	ce 0f       	add	r28, r30
 cce:	d1 1d       	adc	r29, r1
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	ed 01       	movw	r28, r26
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
