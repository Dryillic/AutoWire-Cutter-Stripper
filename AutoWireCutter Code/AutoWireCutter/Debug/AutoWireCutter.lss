
AutoWireCutter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000efe  00000f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080012e  0080012e  00000fc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122b  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c69  00000000  00000000  000022f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000625  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000788  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f2  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000459a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_11>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_16>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	12 03       	mulsu	r17, r18
  b6:	31 03       	mulsu	r19, r17
  b8:	31 03       	mulsu	r19, r17
  ba:	31 03       	mulsu	r19, r17
  bc:	31 03       	mulsu	r19, r17
  be:	31 03       	mulsu	r19, r17
  c0:	31 03       	mulsu	r19, r17
  c2:	12 03       	mulsu	r17, r18
  c4:	31 03       	mulsu	r19, r17
  c6:	31 03       	mulsu	r19, r17
  c8:	31 03       	mulsu	r19, r17
  ca:	31 03       	mulsu	r19, r17
  cc:	31 03       	mulsu	r19, r17
  ce:	e4 02       	muls	r30, r20
  d0:	f2 02       	muls	r31, r18
  d2:	f2 02       	muls	r31, r18
  d4:	f2 02       	muls	r31, r18
  d6:	f2 02       	muls	r31, r18
  d8:	f2 02       	muls	r31, r18
  da:	f2 02       	muls	r31, r18
  dc:	f2 02       	muls	r31, r18
  de:	f2 02       	muls	r31, r18
  e0:	f2 02       	muls	r31, r18
  e2:	31 03       	mulsu	r19, r17
  e4:	31 03       	mulsu	r19, r17
  e6:	31 03       	mulsu	r19, r17
  e8:	31 03       	mulsu	r19, r17
  ea:	31 03       	mulsu	r19, r17
  ec:	31 03       	mulsu	r19, r17
  ee:	31 03       	mulsu	r19, r17
  f0:	12 03       	mulsu	r17, r18
  f2:	12 03       	mulsu	r17, r18
  f4:	12 03       	mulsu	r17, r18
  f6:	12 03       	mulsu	r17, r18

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d8 e0       	ldi	r29, 0x08	; 8
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	11 e0       	ldi	r17, 0x01	; 1
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b1 e0       	ldi	r27, 0x01	; 1
 10a:	ee ef       	ldi	r30, 0xFE	; 254
 10c:	fe e0       	ldi	r31, 0x0E	; 14
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
 110:	05 90       	lpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 32       	cpi	r26, 0x2E	; 46
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	ae e2       	ldi	r26, 0x2E	; 46
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ad 34       	cpi	r26, 0x4D	; 77
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
 12e:	0c 94 7d 07 	jmp	0xefa	; 0xefa <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_Z9printCHARcP6__file>:
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
		PORTD = (1 << PORTD2);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <_Z9printCHARcP6__file+0x4>
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <_ZN5Servo9IntializeEv>:
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	83 e8       	ldi	r24, 0x83	; 131
 150:	84 bd       	out	0x24, r24	; 36
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 158:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <dutyCycle>
 15c:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <dutyCycle+0x1>
 160:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <dutyCycle+0x2>
 164:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <dutyCycle+0x3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 ec       	ldi	r20, 0xC8	; 200
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	4f e7       	ldi	r20, 0x7F	; 127
 17a:	53 e4       	ldi	r21, 0x43	; 67
 17c:	0e 94 25 04 	call	0x84a	; 0x84a <__mulsf3>
 180:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixunssfsi>
 184:	67 bd       	out	0x27, r22	; 39
 186:	78 94       	sei
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	85 bd       	out	0x25, r24	; 37
 18c:	08 95       	ret

0000018e <__vector_16>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
 1b0:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <dutyCycle>
 1b4:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <dutyCycle+0x1>
 1b8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <dutyCycle+0x2>
 1bc:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <dutyCycle+0x3>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	48 ec       	ldi	r20, 0xC8	; 200
 1c6:	52 e4       	ldi	r21, 0x42	; 66
 1c8:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	4f e7       	ldi	r20, 0x7F	; 127
 1d2:	53 e4       	ldi	r21, 0x43	; 67
 1d4:	0e 94 25 04 	call	0x84a	; 0x84a <__mulsf3>
 1d8:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixunssfsi>
 1dc:	67 bd       	out	0x27, r22	; 39
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_ZN7DRV882510InitializeEv>:
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	8b b9       	out	0x0b, r24	; 11
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	8a b9       	out	0x0a, r24	; 10
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 216:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 220:	78 94       	sei
 222:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 226:	08 95       	ret

00000228 <__vector_11>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <count>
 240:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <count+0x1>
 244:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <count+0x2>
 248:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <count+0x3>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	a1 1d       	adc	r26, r1
 250:	b1 1d       	adc	r27, r1
 252:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <count>
 256:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <count+0x1>
 25a:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <count+0x2>
 25e:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <count+0x3>
 262:	9b b1       	in	r25, 0x0b	; 11
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	89 27       	eor	r24, r25
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <count>
 26e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <count+0x1>
 272:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <count+0x2>
 276:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <count+0x3>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	94 49       	sbci	r25, 0x94	; 148
 27e:	a5 43       	sbci	r26, 0x35	; 53
 280:	b7 47       	sbci	r27, 0x77	; 119
 282:	44 f0       	brlt	.+16     	; 0x294 <__vector_11+0x6c>
 284:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <count>
 288:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <count+0x1>
 28c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <count+0x2>
 290:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <count+0x3>
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <_ZN7DRV88259DirectionEb>:
	}	
}

void DRV8825::Direction(bool directionCont) { //Set Stepper Direction uses PORTD3
	if (directionCont) { //true is counter-clockwise, the direction the wire normally feeds
 2a8:	66 23       	and	r22, r22
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <_ZN7DRV88259DirectionEb+0x10>
	dir = true;
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	fc 01       	movw	r30, r24
 2b0:	22 83       	std	Z+2, r18	; 0x02
	PORTD = (1 << PORTD3);
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	08 95       	ret
	}
	else { //false is clockwise
	dir = false;
 2b8:	fc 01       	movw	r30, r24
 2ba:	12 82       	std	Z+2, r1	; 0x02
	PORTD = (0 << PORTD3);
 2bc:	1b b8       	out	0x0b, r1	; 11
 2be:	08 95       	ret

000002c0 <_ZN7DRV88259RuntostepEib>:
	}	
}

void DRV8825::Runtostep(int stepCount, bool directionCont) { //200*32 microsteps per revolution meaning 6400 is one revolution
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
 2d2:	8b 01       	movw	r16, r22
	long countcurrent = count;
 2d4:	c0 90 3d 01 	lds	r12, 0x013D	; 0x80013d <count>
 2d8:	d0 90 3e 01 	lds	r13, 0x013E	; 0x80013e <count+0x1>
 2dc:	e0 90 3f 01 	lds	r14, 0x013F	; 0x80013f <count+0x2>
 2e0:	f0 90 40 01 	lds	r15, 0x0140	; 0x800140 <count+0x3>
	this->Direction(directionCont);
 2e4:	64 2f       	mov	r22, r20
 2e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN7DRV88259DirectionEb>
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 2ea:	a8 01       	movw	r20, r16
 2ec:	11 0f       	add	r17, r17
 2ee:	66 0b       	sbc	r22, r22
 2f0:	77 0b       	sbc	r23, r23
 2f2:	4c 0d       	add	r20, r12
 2f4:	5d 1d       	adc	r21, r13
 2f6:	6e 1d       	adc	r22, r14
 2f8:	7f 1d       	adc	r23, r15
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	6f 4f       	sbci	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <count>
 306:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <count+0x1>
 30a:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <count+0x2>
 30e:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <count+0x3>
 312:	84 17       	cp	r24, r20
 314:	95 07       	cpc	r25, r21
 316:	a6 07       	cpc	r26, r22
 318:	b7 07       	cpc	r27, r23
 31a:	84 f4       	brge	.+32     	; 0x33c <_ZN7DRV88259RuntostepEib+0x7c>
	}
}

void DRV8825::Enable (bool enableCont) { //Enable Stepper Controller uses PORTD2
	if (enableCont) {
		enbl = true;
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	2b 83       	std	Y+3, r18	; 0x03
		PORTD = (0 << PORTD2);
 320:	1b b8       	out	0x0b, r1	; 11
}

void DRV8825::Runtostep(int stepCount, bool directionCont) { //200*32 microsteps per revolution meaning 6400 is one revolution
	long countcurrent = count;
	this->Direction(directionCont);
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
 322:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <count>
 326:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <count+0x1>
 32a:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <count+0x2>
 32e:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <count+0x3>
 332:	84 17       	cp	r24, r20
 334:	95 07       	cpc	r25, r21
 336:	a6 07       	cpc	r26, r22
 338:	b7 07       	cpc	r27, r23
 33a:	8c f3       	brlt	.-30     	; 0x31e <_ZN7DRV88259RuntostepEib+0x5e>
	if (enableCont) {
		enbl = true;
		PORTD = (0 << PORTD2);
	}
	else {
		enbl = false;
 33c:	1b 82       	std	Y+3, r1	; 0x03
		PORTD = (1 << PORTD2);
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	8b b9       	out	0x0b, r24	; 11
	this->Direction(directionCont);
	while (count < (countcurrent+stepCount+1)) { //+1 to account for setup time when the enable pin goes high
		this->Enable(true);
	}
	this->Enable(false);
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	08 95       	ret

00000354 <_Z6keypadv>:
		// Reset counter
		count = 0;
	}
}

unsigned char keypad(void){	// Define the function to return which key is pressed
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	68 97       	sbiw	r28, 0x18	; 24
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;	//which key is pressed?
	unsigned char portb_pin;
	
	unsigned char keypad_column[4] = {7,6,5,4};	//Pins b7, 6, 5, 4 of Port B control keypad columns
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	8a 83       	std	Y+2, r24	; 0x02
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	8b 83       	std	Y+3, r24	; 0x03
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char keypad_row[4] = {3,2,1,0};	// Pins b3, 2, 1, 0 of Port B control keypad rows
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	8d 83       	std	Y+5, r24	; 0x05
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	8e 83       	std	Y+6, r24	; 0x06
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	8f 83       	std	Y+7, r24	; 0x07
 390:	18 86       	std	Y+8, r1	; 0x08
	unsigned char keypad_array[4][4] ={	//Array contains all
		{'1','2','3','A'},
		{'4','5','6','B'},
		{'7','8','9','C'},
		{'*','0','#','D'}
	};
 392:	80 e1       	ldi	r24, 0x10	; 16
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	de 01       	movw	r26, r28
 39a:	19 96       	adiw	r26, 0x09	; 9
 39c:	01 90       	ld	r0, Z+
 39e:	0d 92       	st	X+, r0
 3a0:	8a 95       	dec	r24
 3a2:	e1 f7       	brne	.-8      	; 0x39c <_Z6keypadv+0x48>
 3a4:	8e 01       	movw	r16, r28
 3a6:	0f 5f       	subi	r16, 0xFF	; 255
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
 3aa:	a0 e0       	ldi	r26, 0x00	; 0
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
 3ae:	cc 24       	eor	r12, r12
 3b0:	c3 94       	inc	r12
 3b2:	d1 2c       	mov	r13, r1
 3b4:	7d 01       	movw	r14, r26
 3b6:	f8 01       	movw	r30, r16
 3b8:	c6 01       	movw	r24, r12
 3ba:	01 90       	ld	r0, Z+
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <_Z6keypadv+0x6e>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <_Z6keypadv+0x6a>
 3c6:	8f 01       	movw	r16, r30
 3c8:	80 95       	com	r24
 3ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	8f e3       	ldi	r24, 0x3F	; 63
 3ce:	9c e9       	ldi	r25, 0x9C	; 156
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <_Z6keypadv+0x7c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z6keypadv+0x82>
 3d6:	00 00       	nop
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
 3d8:	23 b1       	in	r18, 0x03	; 3
		for(row=0; row<4; row++){
			if((portb_pin & (1<<(keypad_row[row])))==0) {
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	c9 01       	movw	r24, r18
 3de:	0d 80       	ldd	r0, Y+5	; 0x05
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_Z6keypadv+0x92>
 3e2:	95 95       	asr	r25
 3e4:	87 95       	ror	r24
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <_Z6keypadv+0x8e>
 3ea:	bc 01       	movw	r22, r24
 3ec:	61 70       	andi	r22, 0x01	; 1
 3ee:	77 27       	eor	r23, r23
 3f0:	80 ff       	sbrs	r24, 0
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f4:	fe 01       	movw	r30, r28
 3f6:	36 96       	adiw	r30, 0x06	; 6
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	bc 01       	movw	r22, r24
 3fe:	a9 01       	movw	r20, r18
 400:	01 90       	ld	r0, Z+
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	55 95       	asr	r21
 406:	47 95       	ror	r20
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	40 fd       	sbrc	r20, 0
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
 410:	ee 0c       	add	r14, r14
 412:	ff 1c       	adc	r15, r15
 414:	ee 0c       	add	r14, r14
 416:	ff 1c       	adc	r15, r15
 418:	e1 e0       	ldi	r30, 0x01	; 1
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	ee 0e       	add	r14, r30
 422:	ff 1e       	adc	r15, r31
 424:	f7 01       	movw	r30, r14
 426:	e6 0f       	add	r30, r22
 428:	f7 1f       	adc	r31, r23
 42a:	80 85       	ldd	r24, Z+8	; 0x08
				return (key);	// return the answer, which key is pressed?
 42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	01 96       	adiw	r24, 0x01	; 1
	
	for (column=0; column<4; column++){	//
		PORTB = ~(1<<(keypad_column[column]));
		_delay_ms(20);
		portb_pin = PINB;	//read the value from port B
		for(row=0; row<4; row++){
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	91 05       	cpc	r25, r1
 434:	19 f7       	brne	.-58     	; 0x3fc <_Z6keypadv+0xa8>
 436:	11 96       	adiw	r26, 0x01	; 1
	};
	unsigned char column;
	unsigned char row;

	
	for (column=0; column<4; column++){	//
 438:	a4 30       	cpi	r26, 0x04	; 4
 43a:	b1 05       	cpc	r27, r1
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	ba cf       	rjmp	.-140    	; 0x3b4 <_Z6keypadv+0x60>
				key = keypad_array[column][row];	// search for the corresponding element in keypad array
				return (key);	// return the answer, which key is pressed?
			}
		}
	}
}
 440:	68 96       	adiw	r28, 0x18	; 24
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	08 95       	ret

0000045e <main>:
check out http://savannah.nongnu.org/bugs/?36970. Function call moved to Main
for proper scope*/
//FILE uart_str = FDEV_SETUP_STREAM(printCHAR, NULL, _FDEV_SETUP_RW); /* Sets up "printf" */

int main(void)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	2a 97       	sbiw	r28, 0x0a	; 10
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
	static FILE uart_str;
	fdev_setup_stream(&uart_str,printCHAR,NULL,_FDEV_SETUP_WRITE);
 472:	ef e2       	ldi	r30, 0x2F	; 47
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	8b e9       	ldi	r24, 0x9B	; 155
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	91 87       	std	Z+9, r25	; 0x09
 47c:	80 87       	std	Z+8, r24	; 0x08
 47e:	13 86       	std	Z+11, r1	; 0x0b
 480:	12 86       	std	Z+10, r1	; 0x0a
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	83 83       	std	Z+3, r24	; 0x03
 486:	15 86       	std	Z+13, r1	; 0x0d
 488:	14 86       	std	Z+12, r1	; 0x0c
	
	DDRB = 0xF0;	//Configure Port B, Pins b7 to b4 are output. Pins b3 to b0 are input.
 48a:	80 ef       	ldi	r24, 0xF0	; 240
 48c:	84 b9       	out	0x04, r24	; 4
	// CTC for Timer 2 Setup
	TCCR2B |= (1<<WGM21);	// Configure Timer 2 to CTC (Clear on timer compare) mode?????????????????????????????
 48e:	a1 eb       	ldi	r26, 0xB1	; 177
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	8c 91       	ld	r24, X
 494:	82 60       	ori	r24, 0x02	; 2
 496:	8c 93       	st	X, r24
	OCR2A = 260; // Set CTC Value for ~30HZ (From (8mHz Clock / 1024 prescaler) / (target of 30 HZ) = ~260)
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2B |= ((1<<CS20) | (1<<CS21) | (1<<CS22)); 	// Setup Timer for 8 mHz with a 1024 prescale
 49e:	8c 91       	ld	r24, X
 4a0:	87 60       	ori	r24, 0x07	; 7
 4a2:	8c 93       	st	X, r24
	
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
 4a4:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <__iob+0x3>
 4a8:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <__iob+0x2>
#include "DRV8825.h"


static inline void ser_init() /* I'm told Static Inline functions are great for things that are called once (like initializing serial) */
{
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Serial Transmit and Recieve Enable */
 4ac:	88 e1       	ldi	r24, 0x18	; 24
 4ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0 << USBS0) | (3 << UCSZ00); /* Set Stop Bit Length (1 Stop Bit) and Frame Length (8 data bits). No parity */
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = (unsigned char)(BAUD_PRESCALE >> 8); /* Load upper 8-bits of baud rate value into high byte of UBBR0 register */
 4b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE; /* Load lower 8-bits of the baud rate value into low byte of UBBR0 register */
 4bc:	8f ec       	ldi	r24, 0xCF	; 207
 4be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	while ( !( UCSR0A & (1 << UDRE0)));
 4c2:	e0 ec       	ldi	r30, 0xC0	; 192
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	85 ff       	sbrs	r24, 5
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <main+0x68>
	; /* Wait for an empty Transmit Buffer */
	UDR0 = display_On; /* Turn LCD on with no blink and no cursor */
 4cc:	e6 ec       	ldi	r30, 0xC6	; 198
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	86 e1       	ldi	r24, 0x16	; 22
 4d2:	80 83       	st	Z, r24
	// UART Link
	stdout = &uart_str; /* Links stdout and stream from file we set up */
	
	// Serial Init, LCD Backlight on
	ser_init(); /* Serial Initialize */
	UDR0 = backlight_on; /* Turn on LCD backlight */
 4d4:	81 e1       	ldi	r24, 0x11	; 17
 4d6:	80 83       	st	Z, r24
	
	//Create Servo Object and Init
	Servo MainServo;
	MainServo.Intialize();
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN5Servo9IntializeEv>
		
	//Create Stepper Object and Init
	DRV8825 MainStepper;
	MainStepper.Initialize();
 4e0:	ce 01       	movw	r24, r28
 4e2:	05 96       	adiw	r24, 0x05	; 5
 4e4:	0e 94 00 01 	call	0x200	; 0x200 <_ZN7DRV882510InitializeEv>
		if (count >= 4) {
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 4e8:	cc 24       	eor	r12, r12
 4ea:	c3 94       	inc	r12
 4ec:	d1 2c       	mov	r13, r1
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 4ee:	00 ec       	ldi	r16, 0xC0	; 192
 4f0:	10 e0       	ldi	r17, 0x00	; 0
						UDR0 = form_feed;
 4f2:	0f 2e       	mov	r0, r31
 4f4:	f6 ec       	ldi	r31, 0xC6	; 198
 4f6:	8f 2e       	mov	r8, r31
 4f8:	91 2c       	mov	r9, r1
 4fa:	f0 2d       	mov	r31, r0
 4fc:	0f 2e       	mov	r0, r31
 4fe:	fc e0       	ldi	r31, 0x0C	; 12
 500:	3f 2e       	mov	r3, r31
 502:	f0 2d       	mov	r31, r0
						_delay_ms(5);
						UDR0 = backlight_on;
 504:	0f 2e       	mov	r0, r31
 506:	f1 e1       	ldi	r31, 0x11	; 17
 508:	4f 2e       	mov	r4, r31
 50a:	f0 2d       	mov	r31, r0
						printf("The # is:\r");
 50c:	0f 2e       	mov	r0, r31
 50e:	f2 e2       	ldi	r31, 0x22	; 34
 510:	af 2e       	mov	r10, r31
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	bf 2e       	mov	r11, r31
 516:	f0 2d       	mov	r31, r0
				digit = keypad();	/* Call the  function "keypad" to return the value of key pressed, and hold it with variable "digit" */
				switch(digit) /* Now evaluate value of "digit" to match with the LED pattern needed to be exported to Port B */
				{
					case '0':
						MainStepper.Runtostep(6400,true);
						printf("Rotating Stepper!");
 518:	0f 2e       	mov	r0, r31
 51a:	f0 e1       	ldi	r31, 0x10	; 16
 51c:	6f 2e       	mov	r6, r31
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	7f 2e       	mov	r7, r31
 522:	f0 2d       	mov	r31, r0
					printf("%c", digit);
					_delay_ms(50);
					break;
				}
			}
			TIFR2 = (1<<OCF2A); // Clear CTC flag by writing a logic 1 to it
 524:	68 94       	set
 526:	55 24       	eor	r5, r5
 528:	51 f8       	bld	r5, 1
	int digit;	/* Temporary variable to hold the value of which key is pressed */

	
	while(1)
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
 52a:	b9 9b       	sbis	0x17, 1	; 23
 52c:	fe cf       	rjmp	.-4      	; 0x52a <main+0xcc>
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	uint8_t button_state = 0;

	// Check if button is high or low for the moment
	uint8_t current_state = ((~BUTTON_PIN & BUTTON_MASK) | (~BUTTON_PIN & BUTTON_MASK1) | (~BUTTON_PIN & BUTTON_MASK2) | (~BUTTON_PIN & BUTTON_MASK3)) != 0; // This is what allows multiple buttons to be debounced
 52e:	43 b1       	in	r20, 0x03	; 3
 530:	33 b1       	in	r19, 0x03	; 3
 532:	93 b1       	in	r25, 0x03	; 3
 534:	23 b1       	in	r18, 0x03	; 3
	
	
	// Original Debounce
	if (current_state != button_state) {
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	40 95       	com	r20
 53a:	50 95       	com	r21
 53c:	ba 01       	movw	r22, r20
 53e:	60 71       	andi	r22, 0x10	; 16
 540:	77 27       	eor	r23, r23
 542:	43 2f       	mov	r20, r19
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	40 95       	com	r20
 548:	50 95       	com	r21
 54a:	40 72       	andi	r20, 0x20	; 32
 54c:	55 27       	eor	r21, r21
 54e:	46 2b       	or	r20, r22
 550:	57 2b       	or	r21, r23
 552:	89 2f       	mov	r24, r25
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	80 95       	com	r24
 558:	90 95       	com	r25
 55a:	80 74       	andi	r24, 0x40	; 64
 55c:	99 27       	eor	r25, r25
 55e:	84 2b       	or	r24, r20
 560:	95 2b       	or	r25, r21
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	20 95       	com	r18
 566:	30 95       	com	r19
 568:	20 78       	andi	r18, 0x80	; 128
 56a:	33 27       	eor	r19, r19
 56c:	82 2b       	or	r24, r18
 56e:	93 2b       	or	r25, r19
 570:	89 2b       	or	r24, r25
 572:	71 f0       	breq	.+28     	; 0x590 <main+0x132>
		// Button state is about to be changed, increase counter
		count++;
 574:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
		if (count >= 4) {
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	48 f0       	brcs	.+18     	; 0x594 <main+0x136>
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button_down = 1;
 582:	d0 92 46 01 	sts	0x0146, r13	; 0x800146 <button_down+0x1>
 586:	c0 92 45 01 	sts	0x0145, r12	; 0x800145 <button_down>
			}
			count = 0;
 58a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 58e:	02 c0       	rjmp	.+4      	; 0x594 <main+0x136>
		}
		} else {
		// Reset counter
		count = 0;
 590:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	{
		if (TIFR2 & (1<<OCF2A)) // If the CTC Throws it's flag at OCF2A (Your timer has elapsed)
		{
			debounce();
			
			if (button_down)
 594:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <button_down>
 598:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <button_down+0x1>
 59c:	89 2b       	or	r24, r25
 59e:	09 f4       	brne	.+2      	; 0x5a2 <main+0x144>
 5a0:	60 c0       	rjmp	.+192    	; 0x662 <main+0x204>
			{
				button_down = 0;
 5a2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <button_down+0x1>
 5a6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <button_down>
				digit = keypad();	/* Call the  function "keypad" to return the value of key pressed, and hold it with variable "digit" */
 5aa:	0e 94 aa 01 	call	0x354	; 0x354 <_Z6keypadv>
 5ae:	e8 2e       	mov	r14, r24
 5b0:	f1 2c       	mov	r15, r1
				switch(digit) /* Now evaluate value of "digit" to match with the LED pattern needed to be exported to Port B */
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	fc 01       	movw	r30, r24
 5b6:	b3 97       	sbiw	r30, 0x23	; 35
 5b8:	e2 32       	cpi	r30, 0x22	; 34
 5ba:	f1 05       	cpc	r31, r1
 5bc:	08 f0       	brcs	.+2      	; 0x5c0 <main+0x162>
 5be:	51 c0       	rjmp	.+162    	; 0x662 <main+0x204>
 5c0:	e6 5a       	subi	r30, 0xA6	; 166
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	0c 94 92 04 	jmp	0x924	; 0x924 <__tablejump2__>
				{
					case '0':
						MainStepper.Runtostep(6400,true);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	79 e1       	ldi	r23, 0x19	; 25
 5ce:	ce 01       	movw	r24, r28
 5d0:	05 96       	adiw	r24, 0x05	; 5
 5d2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_ZN7DRV88259RuntostepEib>
						printf("Rotating Stepper!");
 5d6:	7f 92       	push	r7
 5d8:	6f 92       	push	r6
 5da:	0e 94 98 04 	call	0x930	; 0x930 <printf>
						break;
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	3f c0       	rjmp	.+126    	; 0x662 <main+0x204>
					case '5':
					case '6':
					case '7':
					case '8':
					case '9':
						while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 5e4:	f8 01       	movw	r30, r16
 5e6:	80 81       	ld	r24, Z
 5e8:	85 ff       	sbrs	r24, 5
 5ea:	fc cf       	rjmp	.-8      	; 0x5e4 <main+0x186>
						UDR0 = form_feed;
 5ec:	f4 01       	movw	r30, r8
 5ee:	30 82       	st	Z, r3
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
 5f2:	97 e2       	ldi	r25, 0x27	; 39
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <main+0x196>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x19c>
 5fa:	00 00       	nop
						_delay_ms(5);
						UDR0 = backlight_on;
 5fc:	40 82       	st	Z, r4
						printf("The # is:\r");
 5fe:	bf 92       	push	r11
 600:	af 92       	push	r10
 602:	0e 94 98 04 	call	0x930	; 0x930 <printf>
						printf("%c", digit);
 606:	c7 01       	movw	r24, r14
 608:	0e 94 ae 04 	call	0x95c	; 0x95c <putchar>
 60c:	ff e7       	ldi	r31, 0x7F	; 127
 60e:	28 e3       	ldi	r18, 0x38	; 56
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	f1 50       	subi	r31, 0x01	; 1
 614:	20 40       	sbci	r18, 0x00	; 0
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0x1b4>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x1be>
 61c:	00 00       	nop
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	1f c0       	rjmp	.+62     	; 0x662 <main+0x204>
					case 'B':
					case 'C':
					case 'D':
					case '*':
					case '#':
					while ( !( UCSR0A & (1 << UDRE0))); /* Wait for serial buffer to clear, clear screen, turn on backlight, display text */
 624:	f8 01       	movw	r30, r16
 626:	80 81       	ld	r24, Z
 628:	85 ff       	sbrs	r24, 5
 62a:	fc cf       	rjmp	.-8      	; 0x624 <main+0x1c6>
					UDR0 = form_feed;
 62c:	f4 01       	movw	r30, r8
 62e:	30 82       	st	Z, r3
 630:	8f e0       	ldi	r24, 0x0F	; 15
 632:	97 e2       	ldi	r25, 0x27	; 39
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <main+0x1d6>
 638:	00 c0       	rjmp	.+0      	; 0x63a <main+0x1dc>
 63a:	00 00       	nop
					_delay_ms(5);
					UDR0 = backlight_on;
 63c:	40 82       	st	Z, r4
					printf("The # is:\r");
 63e:	bf 92       	push	r11
 640:	af 92       	push	r10
 642:	0e 94 98 04 	call	0x930	; 0x930 <printf>
					printf("%c", digit);
 646:	c7 01       	movw	r24, r14
 648:	0e 94 ae 04 	call	0x95c	; 0x95c <putchar>
 64c:	ff e7       	ldi	r31, 0x7F	; 127
 64e:	28 e3       	ldi	r18, 0x38	; 56
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	f1 50       	subi	r31, 0x01	; 1
 654:	20 40       	sbci	r18, 0x00	; 0
 656:	80 40       	sbci	r24, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <main+0x1f4>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x1fe>
 65c:	00 00       	nop
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
					_delay_ms(50);
					break;
				}
			}
			TIFR2 = (1<<OCF2A); // Clear CTC flag by writing a logic 1 to it
 662:	57 ba       	out	0x17, r5	; 23
 664:	62 cf       	rjmp	.-316    	; 0x52a <main+0xcc>

00000666 <__divsf3>:
 666:	0e 94 47 03 	call	0x68e	; 0x68e <__divsf3x>
 66a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_round>
 66e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_pscB>
 672:	58 f0       	brcs	.+22     	; 0x68a <__divsf3+0x24>
 674:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscA>
 678:	40 f0       	brcs	.+16     	; 0x68a <__divsf3+0x24>
 67a:	29 f4       	brne	.+10     	; 0x686 <__divsf3+0x20>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	29 f0       	breq	.+10     	; 0x68a <__divsf3+0x24>
 680:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 684:	51 11       	cpse	r21, r1
 686:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>
 68a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_nan>

0000068e <__divsf3x>:
 68e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_split3>
 692:	68 f3       	brcs	.-38     	; 0x66e <__divsf3+0x8>

00000694 <__divsf3_pse>:
 694:	99 23       	and	r25, r25
 696:	b1 f3       	breq	.-20     	; 0x684 <__divsf3+0x1e>
 698:	55 23       	and	r21, r21
 69a:	91 f3       	breq	.-28     	; 0x680 <__divsf3+0x1a>
 69c:	95 1b       	sub	r25, r21
 69e:	55 0b       	sbc	r21, r21
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	62 17       	cp	r22, r18
 6a6:	73 07       	cpc	r23, r19
 6a8:	84 07       	cpc	r24, r20
 6aa:	38 f0       	brcs	.+14     	; 0x6ba <__divsf3_pse+0x26>
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	44 1f       	adc	r20, r20
 6b6:	aa 1f       	adc	r26, r26
 6b8:	a9 f3       	breq	.-22     	; 0x6a4 <__divsf3_pse+0x10>
 6ba:	35 d0       	rcall	.+106    	; 0x726 <__divsf3_pse+0x92>
 6bc:	0e 2e       	mov	r0, r30
 6be:	3a f0       	brmi	.+14     	; 0x6ce <__divsf3_pse+0x3a>
 6c0:	e0 e8       	ldi	r30, 0x80	; 128
 6c2:	32 d0       	rcall	.+100    	; 0x728 <__divsf3_pse+0x94>
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	e6 95       	lsr	r30
 6ca:	00 1c       	adc	r0, r0
 6cc:	ca f7       	brpl	.-14     	; 0x6c0 <__divsf3_pse+0x2c>
 6ce:	2b d0       	rcall	.+86     	; 0x726 <__divsf3_pse+0x92>
 6d0:	fe 2f       	mov	r31, r30
 6d2:	29 d0       	rcall	.+82     	; 0x726 <__divsf3_pse+0x92>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	26 17       	cp	r18, r22
 6de:	37 07       	cpc	r19, r23
 6e0:	48 07       	cpc	r20, r24
 6e2:	ab 07       	cpc	r26, r27
 6e4:	b0 e8       	ldi	r27, 0x80	; 128
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__divsf3_pse+0x56>
 6e8:	bb 0b       	sbc	r27, r27
 6ea:	80 2d       	mov	r24, r0
 6ec:	bf 01       	movw	r22, r30
 6ee:	ff 27       	eor	r31, r31
 6f0:	93 58       	subi	r25, 0x83	; 131
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	3a f0       	brmi	.+14     	; 0x704 <__divsf3_pse+0x70>
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	51 05       	cpc	r21, r1
 6fa:	78 f0       	brcs	.+30     	; 0x71a <__divsf3_pse+0x86>
 6fc:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 700:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	e4 f3       	brlt	.-8      	; 0x700 <__divsf3_pse+0x6c>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	d4 f3       	brlt	.-12     	; 0x700 <__divsf3_pse+0x6c>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c9 f7       	brne	.-14     	; 0x70c <__divsf3_pse+0x78>
 71a:	88 0f       	add	r24, r24
 71c:	91 1d       	adc	r25, r1
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	62 17       	cp	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	ba 07       	cpc	r27, r26
 738:	20 f0       	brcs	.+8      	; 0x742 <__divsf3_pse+0xae>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	ba 0b       	sbc	r27, r26
 742:	ee 1f       	adc	r30, r30
 744:	88 f7       	brcc	.-30     	; 0x728 <__divsf3_pse+0x94>
 746:	e0 95       	com	r30
 748:	08 95       	ret

0000074a <__fixunssfsi>:
 74a:	0e 94 04 04 	call	0x808	; 0x808 <__fp_splitA>
 74e:	88 f0       	brcs	.+34     	; 0x772 <__fixunssfsi+0x28>
 750:	9f 57       	subi	r25, 0x7F	; 127
 752:	98 f0       	brcs	.+38     	; 0x77a <__fixunssfsi+0x30>
 754:	b9 2f       	mov	r27, r25
 756:	99 27       	eor	r25, r25
 758:	b7 51       	subi	r27, 0x17	; 23
 75a:	b0 f0       	brcs	.+44     	; 0x788 <__fixunssfsi+0x3e>
 75c:	e1 f0       	breq	.+56     	; 0x796 <__fixunssfsi+0x4c>
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	1a f0       	brmi	.+6      	; 0x76e <__fixunssfsi+0x24>
 768:	ba 95       	dec	r27
 76a:	c9 f7       	brne	.-14     	; 0x75e <__fixunssfsi+0x14>
 76c:	14 c0       	rjmp	.+40     	; 0x796 <__fixunssfsi+0x4c>
 76e:	b1 30       	cpi	r27, 0x01	; 1
 770:	91 f0       	breq	.+36     	; 0x796 <__fixunssfsi+0x4c>
 772:	0e 94 1e 04 	call	0x83c	; 0x83c <__fp_zero>
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	08 95       	ret
 77a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_zero>
 77e:	67 2f       	mov	r22, r23
 780:	78 2f       	mov	r23, r24
 782:	88 27       	eor	r24, r24
 784:	b8 5f       	subi	r27, 0xF8	; 248
 786:	39 f0       	breq	.+14     	; 0x796 <__fixunssfsi+0x4c>
 788:	b9 3f       	cpi	r27, 0xF9	; 249
 78a:	cc f3       	brlt	.-14     	; 0x77e <__fixunssfsi+0x34>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b3 95       	inc	r27
 794:	d9 f7       	brne	.-10     	; 0x78c <__fixunssfsi+0x42>
 796:	3e f4       	brtc	.+14     	; 0x7a6 <__fixunssfsi+0x5c>
 798:	90 95       	com	r25
 79a:	80 95       	com	r24
 79c:	70 95       	com	r23
 79e:	61 95       	neg	r22
 7a0:	7f 4f       	sbci	r23, 0xFF	; 255
 7a2:	8f 4f       	sbci	r24, 0xFF	; 255
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__fp_inf>:
 7a8:	97 f9       	bld	r25, 7
 7aa:	9f 67       	ori	r25, 0x7F	; 127
 7ac:	80 e8       	ldi	r24, 0x80	; 128
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	08 95       	ret

000007b4 <__fp_nan>:
 7b4:	9f ef       	ldi	r25, 0xFF	; 255
 7b6:	80 ec       	ldi	r24, 0xC0	; 192
 7b8:	08 95       	ret

000007ba <__fp_pscA>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	18 06       	cpc	r1, r24
 7c4:	09 06       	cpc	r0, r25
 7c6:	08 95       	ret

000007c8 <__fp_pscB>:
 7c8:	00 24       	eor	r0, r0
 7ca:	0a 94       	dec	r0
 7cc:	12 16       	cp	r1, r18
 7ce:	13 06       	cpc	r1, r19
 7d0:	14 06       	cpc	r1, r20
 7d2:	05 06       	cpc	r0, r21
 7d4:	08 95       	ret

000007d6 <__fp_round>:
 7d6:	09 2e       	mov	r0, r25
 7d8:	03 94       	inc	r0
 7da:	00 0c       	add	r0, r0
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__fp_round+0xc>
 7de:	88 23       	and	r24, r24
 7e0:	52 f0       	brmi	.+20     	; 0x7f6 <__fp_round+0x20>
 7e2:	bb 0f       	add	r27, r27
 7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__fp_round+0x20>
 7e6:	bf 2b       	or	r27, r31
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_round+0x18>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__fp_round+0x20>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <__fp_split3>:
 7f8:	57 fd       	sbrc	r21, 7
 7fa:	90 58       	subi	r25, 0x80	; 128
 7fc:	44 0f       	add	r20, r20
 7fe:	55 1f       	adc	r21, r21
 800:	59 f0       	breq	.+22     	; 0x818 <__fp_splitA+0x10>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	71 f0       	breq	.+28     	; 0x822 <__fp_splitA+0x1a>
 806:	47 95       	ror	r20

00000808 <__fp_splitA>:
 808:	88 0f       	add	r24, r24
 80a:	97 fb       	bst	r25, 7
 80c:	99 1f       	adc	r25, r25
 80e:	61 f0       	breq	.+24     	; 0x828 <__fp_splitA+0x20>
 810:	9f 3f       	cpi	r25, 0xFF	; 255
 812:	79 f0       	breq	.+30     	; 0x832 <__fp_splitA+0x2a>
 814:	87 95       	ror	r24
 816:	08 95       	ret
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	14 06       	cpc	r1, r20
 81e:	55 1f       	adc	r21, r21
 820:	f2 cf       	rjmp	.-28     	; 0x806 <__fp_split3+0xe>
 822:	46 95       	lsr	r20
 824:	f1 df       	rcall	.-30     	; 0x808 <__fp_splitA>
 826:	08 c0       	rjmp	.+16     	; 0x838 <__fp_splitA+0x30>
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	99 1f       	adc	r25, r25
 830:	f1 cf       	rjmp	.-30     	; 0x814 <__fp_splitA+0xc>
 832:	86 95       	lsr	r24
 834:	71 05       	cpc	r23, r1
 836:	61 05       	cpc	r22, r1
 838:	08 94       	sec
 83a:	08 95       	ret

0000083c <__fp_zero>:
 83c:	e8 94       	clt

0000083e <__fp_szero>:
 83e:	bb 27       	eor	r27, r27
 840:	66 27       	eor	r22, r22
 842:	77 27       	eor	r23, r23
 844:	cb 01       	movw	r24, r22
 846:	97 f9       	bld	r25, 7
 848:	08 95       	ret

0000084a <__mulsf3>:
 84a:	0e 94 38 04 	call	0x870	; 0x870 <__mulsf3x>
 84e:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_round>
 852:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscA>
 856:	38 f0       	brcs	.+14     	; 0x866 <__mulsf3+0x1c>
 858:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_pscB>
 85c:	20 f0       	brcs	.+8      	; 0x866 <__mulsf3+0x1c>
 85e:	95 23       	and	r25, r21
 860:	11 f0       	breq	.+4      	; 0x866 <__mulsf3+0x1c>
 862:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 866:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_nan>
 86a:	11 24       	eor	r1, r1
 86c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>

00000870 <__mulsf3x>:
 870:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_split3>
 874:	70 f3       	brcs	.-36     	; 0x852 <__mulsf3+0x8>

00000876 <__mulsf3_pse>:
 876:	95 9f       	mul	r25, r21
 878:	c1 f3       	breq	.-16     	; 0x86a <__mulsf3+0x20>
 87a:	95 0f       	add	r25, r21
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	55 1f       	adc	r21, r21
 880:	62 9f       	mul	r22, r18
 882:	f0 01       	movw	r30, r0
 884:	72 9f       	mul	r23, r18
 886:	bb 27       	eor	r27, r27
 888:	f0 0d       	add	r31, r0
 88a:	b1 1d       	adc	r27, r1
 88c:	63 9f       	mul	r22, r19
 88e:	aa 27       	eor	r26, r26
 890:	f0 0d       	add	r31, r0
 892:	b1 1d       	adc	r27, r1
 894:	aa 1f       	adc	r26, r26
 896:	64 9f       	mul	r22, r20
 898:	66 27       	eor	r22, r22
 89a:	b0 0d       	add	r27, r0
 89c:	a1 1d       	adc	r26, r1
 89e:	66 1f       	adc	r22, r22
 8a0:	82 9f       	mul	r24, r18
 8a2:	22 27       	eor	r18, r18
 8a4:	b0 0d       	add	r27, r0
 8a6:	a1 1d       	adc	r26, r1
 8a8:	62 1f       	adc	r22, r18
 8aa:	73 9f       	mul	r23, r19
 8ac:	b0 0d       	add	r27, r0
 8ae:	a1 1d       	adc	r26, r1
 8b0:	62 1f       	adc	r22, r18
 8b2:	83 9f       	mul	r24, r19
 8b4:	a0 0d       	add	r26, r0
 8b6:	61 1d       	adc	r22, r1
 8b8:	22 1f       	adc	r18, r18
 8ba:	74 9f       	mul	r23, r20
 8bc:	33 27       	eor	r19, r19
 8be:	a0 0d       	add	r26, r0
 8c0:	61 1d       	adc	r22, r1
 8c2:	23 1f       	adc	r18, r19
 8c4:	84 9f       	mul	r24, r20
 8c6:	60 0d       	add	r22, r0
 8c8:	21 1d       	adc	r18, r1
 8ca:	82 2f       	mov	r24, r18
 8cc:	76 2f       	mov	r23, r22
 8ce:	6a 2f       	mov	r22, r26
 8d0:	11 24       	eor	r1, r1
 8d2:	9f 57       	subi	r25, 0x7F	; 127
 8d4:	50 40       	sbci	r21, 0x00	; 0
 8d6:	9a f0       	brmi	.+38     	; 0x8fe <__mulsf3_pse+0x88>
 8d8:	f1 f0       	breq	.+60     	; 0x916 <__stack+0x17>
 8da:	88 23       	and	r24, r24
 8dc:	4a f0       	brmi	.+18     	; 0x8f0 <__mulsf3_pse+0x7a>
 8de:	ee 0f       	add	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	bb 1f       	adc	r27, r27
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	91 50       	subi	r25, 0x01	; 1
 8ec:	50 40       	sbci	r21, 0x00	; 0
 8ee:	a9 f7       	brne	.-22     	; 0x8da <__mulsf3_pse+0x64>
 8f0:	9e 3f       	cpi	r25, 0xFE	; 254
 8f2:	51 05       	cpc	r21, r1
 8f4:	80 f0       	brcs	.+32     	; 0x916 <__stack+0x17>
 8f6:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_inf>
 8fa:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_szero>
 8fe:	5f 3f       	cpi	r21, 0xFF	; 255
 900:	e4 f3       	brlt	.-8      	; 0x8fa <__mulsf3_pse+0x84>
 902:	98 3e       	cpi	r25, 0xE8	; 232
 904:	d4 f3       	brlt	.-12     	; 0x8fa <__mulsf3_pse+0x84>
 906:	86 95       	lsr	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b7 95       	ror	r27
 90e:	f7 95       	ror	r31
 910:	e7 95       	ror	r30
 912:	9f 5f       	subi	r25, 0xFF	; 255
 914:	c1 f7       	brne	.-16     	; 0x906 <__stack+0x7>
 916:	fe 2b       	or	r31, r30
 918:	88 0f       	add	r24, r24
 91a:	91 1d       	adc	r25, r1
 91c:	96 95       	lsr	r25
 91e:	87 95       	ror	r24
 920:	97 f9       	bld	r25, 7
 922:	08 95       	ret

00000924 <__tablejump2__>:
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	05 90       	lpm	r0, Z+
 92a:	f4 91       	lpm	r31, Z
 92c:	e0 2d       	mov	r30, r0
 92e:	09 94       	ijmp

00000930 <printf>:
 930:	a0 e0       	ldi	r26, 0x00	; 0
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	ee e9       	ldi	r30, 0x9E	; 158
 936:	f4 e0       	ldi	r31, 0x04	; 4
 938:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__+0x20>
 93c:	ae 01       	movw	r20, r28
 93e:	4b 5f       	subi	r20, 0xFB	; 251
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	fa 01       	movw	r30, r20
 944:	61 91       	ld	r22, Z+
 946:	71 91       	ld	r23, Z+
 948:	af 01       	movw	r20, r30
 94a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__iob+0x2>
 94e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__iob+0x3>
 952:	0e 94 b5 04 	call	0x96a	; 0x96a <vfprintf>
 956:	e2 e0       	ldi	r30, 0x02	; 2
 958:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__+0x20>

0000095c <putchar>:
 95c:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <__iob+0x2>
 960:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <__iob+0x3>
 964:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 968:	08 95       	ret

0000096a <vfprintf>:
 96a:	ab e0       	ldi	r26, 0x0B	; 11
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	eb eb       	ldi	r30, 0xBB	; 187
 970:	f4 e0       	ldi	r31, 0x04	; 4
 972:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__prologue_saves__>
 976:	6c 01       	movw	r12, r24
 978:	7b 01       	movw	r14, r22
 97a:	8a 01       	movw	r16, r20
 97c:	fc 01       	movw	r30, r24
 97e:	17 82       	std	Z+7, r1	; 0x07
 980:	16 82       	std	Z+6, r1	; 0x06
 982:	83 81       	ldd	r24, Z+3	; 0x03
 984:	81 ff       	sbrs	r24, 1
 986:	cc c1       	rjmp	.+920    	; 0xd20 <vfprintf+0x3b6>
 988:	ce 01       	movw	r24, r28
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	3c 01       	movw	r6, r24
 98e:	f6 01       	movw	r30, r12
 990:	93 81       	ldd	r25, Z+3	; 0x03
 992:	f7 01       	movw	r30, r14
 994:	93 fd       	sbrc	r25, 3
 996:	85 91       	lpm	r24, Z+
 998:	93 ff       	sbrs	r25, 3
 99a:	81 91       	ld	r24, Z+
 99c:	7f 01       	movw	r14, r30
 99e:	88 23       	and	r24, r24
 9a0:	09 f4       	brne	.+2      	; 0x9a4 <vfprintf+0x3a>
 9a2:	ba c1       	rjmp	.+884    	; 0xd18 <vfprintf+0x3ae>
 9a4:	85 32       	cpi	r24, 0x25	; 37
 9a6:	39 f4       	brne	.+14     	; 0x9b6 <vfprintf+0x4c>
 9a8:	93 fd       	sbrc	r25, 3
 9aa:	85 91       	lpm	r24, Z+
 9ac:	93 ff       	sbrs	r25, 3
 9ae:	81 91       	ld	r24, Z+
 9b0:	7f 01       	movw	r14, r30
 9b2:	85 32       	cpi	r24, 0x25	; 37
 9b4:	29 f4       	brne	.+10     	; 0x9c0 <vfprintf+0x56>
 9b6:	b6 01       	movw	r22, r12
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 9be:	e7 cf       	rjmp	.-50     	; 0x98e <vfprintf+0x24>
 9c0:	91 2c       	mov	r9, r1
 9c2:	21 2c       	mov	r2, r1
 9c4:	31 2c       	mov	r3, r1
 9c6:	ff e1       	ldi	r31, 0x1F	; 31
 9c8:	f3 15       	cp	r31, r3
 9ca:	d8 f0       	brcs	.+54     	; 0xa02 <vfprintf+0x98>
 9cc:	8b 32       	cpi	r24, 0x2B	; 43
 9ce:	79 f0       	breq	.+30     	; 0x9ee <vfprintf+0x84>
 9d0:	38 f4       	brcc	.+14     	; 0x9e0 <vfprintf+0x76>
 9d2:	80 32       	cpi	r24, 0x20	; 32
 9d4:	79 f0       	breq	.+30     	; 0x9f4 <vfprintf+0x8a>
 9d6:	83 32       	cpi	r24, 0x23	; 35
 9d8:	a1 f4       	brne	.+40     	; 0xa02 <vfprintf+0x98>
 9da:	23 2d       	mov	r18, r3
 9dc:	20 61       	ori	r18, 0x10	; 16
 9de:	1d c0       	rjmp	.+58     	; 0xa1a <vfprintf+0xb0>
 9e0:	8d 32       	cpi	r24, 0x2D	; 45
 9e2:	61 f0       	breq	.+24     	; 0x9fc <vfprintf+0x92>
 9e4:	80 33       	cpi	r24, 0x30	; 48
 9e6:	69 f4       	brne	.+26     	; 0xa02 <vfprintf+0x98>
 9e8:	23 2d       	mov	r18, r3
 9ea:	21 60       	ori	r18, 0x01	; 1
 9ec:	16 c0       	rjmp	.+44     	; 0xa1a <vfprintf+0xb0>
 9ee:	83 2d       	mov	r24, r3
 9f0:	82 60       	ori	r24, 0x02	; 2
 9f2:	38 2e       	mov	r3, r24
 9f4:	e3 2d       	mov	r30, r3
 9f6:	e4 60       	ori	r30, 0x04	; 4
 9f8:	3e 2e       	mov	r3, r30
 9fa:	2a c0       	rjmp	.+84     	; 0xa50 <vfprintf+0xe6>
 9fc:	f3 2d       	mov	r31, r3
 9fe:	f8 60       	ori	r31, 0x08	; 8
 a00:	1d c0       	rjmp	.+58     	; 0xa3c <vfprintf+0xd2>
 a02:	37 fc       	sbrc	r3, 7
 a04:	2d c0       	rjmp	.+90     	; 0xa60 <vfprintf+0xf6>
 a06:	20 ed       	ldi	r18, 0xD0	; 208
 a08:	28 0f       	add	r18, r24
 a0a:	2a 30       	cpi	r18, 0x0A	; 10
 a0c:	40 f0       	brcs	.+16     	; 0xa1e <vfprintf+0xb4>
 a0e:	8e 32       	cpi	r24, 0x2E	; 46
 a10:	b9 f4       	brne	.+46     	; 0xa40 <vfprintf+0xd6>
 a12:	36 fc       	sbrc	r3, 6
 a14:	81 c1       	rjmp	.+770    	; 0xd18 <vfprintf+0x3ae>
 a16:	23 2d       	mov	r18, r3
 a18:	20 64       	ori	r18, 0x40	; 64
 a1a:	32 2e       	mov	r3, r18
 a1c:	19 c0       	rjmp	.+50     	; 0xa50 <vfprintf+0xe6>
 a1e:	36 fe       	sbrs	r3, 6
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <vfprintf+0xc4>
 a22:	8a e0       	ldi	r24, 0x0A	; 10
 a24:	98 9e       	mul	r9, r24
 a26:	20 0d       	add	r18, r0
 a28:	11 24       	eor	r1, r1
 a2a:	92 2e       	mov	r9, r18
 a2c:	11 c0       	rjmp	.+34     	; 0xa50 <vfprintf+0xe6>
 a2e:	ea e0       	ldi	r30, 0x0A	; 10
 a30:	2e 9e       	mul	r2, r30
 a32:	20 0d       	add	r18, r0
 a34:	11 24       	eor	r1, r1
 a36:	22 2e       	mov	r2, r18
 a38:	f3 2d       	mov	r31, r3
 a3a:	f0 62       	ori	r31, 0x20	; 32
 a3c:	3f 2e       	mov	r3, r31
 a3e:	08 c0       	rjmp	.+16     	; 0xa50 <vfprintf+0xe6>
 a40:	8c 36       	cpi	r24, 0x6C	; 108
 a42:	21 f4       	brne	.+8      	; 0xa4c <vfprintf+0xe2>
 a44:	83 2d       	mov	r24, r3
 a46:	80 68       	ori	r24, 0x80	; 128
 a48:	38 2e       	mov	r3, r24
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0xe6>
 a4c:	88 36       	cpi	r24, 0x68	; 104
 a4e:	41 f4       	brne	.+16     	; 0xa60 <vfprintf+0xf6>
 a50:	f7 01       	movw	r30, r14
 a52:	93 fd       	sbrc	r25, 3
 a54:	85 91       	lpm	r24, Z+
 a56:	93 ff       	sbrs	r25, 3
 a58:	81 91       	ld	r24, Z+
 a5a:	7f 01       	movw	r14, r30
 a5c:	81 11       	cpse	r24, r1
 a5e:	b3 cf       	rjmp	.-154    	; 0x9c6 <vfprintf+0x5c>
 a60:	98 2f       	mov	r25, r24
 a62:	9f 7d       	andi	r25, 0xDF	; 223
 a64:	95 54       	subi	r25, 0x45	; 69
 a66:	93 30       	cpi	r25, 0x03	; 3
 a68:	28 f4       	brcc	.+10     	; 0xa74 <vfprintf+0x10a>
 a6a:	0c 5f       	subi	r16, 0xFC	; 252
 a6c:	1f 4f       	sbci	r17, 0xFF	; 255
 a6e:	9f e3       	ldi	r25, 0x3F	; 63
 a70:	99 83       	std	Y+1, r25	; 0x01
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <vfprintf+0x124>
 a74:	83 36       	cpi	r24, 0x63	; 99
 a76:	31 f0       	breq	.+12     	; 0xa84 <vfprintf+0x11a>
 a78:	83 37       	cpi	r24, 0x73	; 115
 a7a:	71 f0       	breq	.+28     	; 0xa98 <vfprintf+0x12e>
 a7c:	83 35       	cpi	r24, 0x53	; 83
 a7e:	09 f0       	breq	.+2      	; 0xa82 <vfprintf+0x118>
 a80:	59 c0       	rjmp	.+178    	; 0xb34 <vfprintf+0x1ca>
 a82:	21 c0       	rjmp	.+66     	; 0xac6 <vfprintf+0x15c>
 a84:	f8 01       	movw	r30, r16
 a86:	80 81       	ld	r24, Z
 a88:	89 83       	std	Y+1, r24	; 0x01
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	88 24       	eor	r8, r8
 a90:	83 94       	inc	r8
 a92:	91 2c       	mov	r9, r1
 a94:	53 01       	movw	r10, r6
 a96:	13 c0       	rjmp	.+38     	; 0xabe <vfprintf+0x154>
 a98:	28 01       	movw	r4, r16
 a9a:	f2 e0       	ldi	r31, 0x02	; 2
 a9c:	4f 0e       	add	r4, r31
 a9e:	51 1c       	adc	r5, r1
 aa0:	f8 01       	movw	r30, r16
 aa2:	a0 80       	ld	r10, Z
 aa4:	b1 80       	ldd	r11, Z+1	; 0x01
 aa6:	36 fe       	sbrs	r3, 6
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vfprintf+0x146>
 aaa:	69 2d       	mov	r22, r9
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <vfprintf+0x14a>
 ab0:	6f ef       	ldi	r22, 0xFF	; 255
 ab2:	7f ef       	ldi	r23, 0xFF	; 255
 ab4:	c5 01       	movw	r24, r10
 ab6:	0e 94 a1 06 	call	0xd42	; 0xd42 <strnlen>
 aba:	4c 01       	movw	r8, r24
 abc:	82 01       	movw	r16, r4
 abe:	f3 2d       	mov	r31, r3
 ac0:	ff 77       	andi	r31, 0x7F	; 127
 ac2:	3f 2e       	mov	r3, r31
 ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <vfprintf+0x188>
 ac6:	28 01       	movw	r4, r16
 ac8:	22 e0       	ldi	r18, 0x02	; 2
 aca:	42 0e       	add	r4, r18
 acc:	51 1c       	adc	r5, r1
 ace:	f8 01       	movw	r30, r16
 ad0:	a0 80       	ld	r10, Z
 ad2:	b1 80       	ldd	r11, Z+1	; 0x01
 ad4:	36 fe       	sbrs	r3, 6
 ad6:	03 c0       	rjmp	.+6      	; 0xade <vfprintf+0x174>
 ad8:	69 2d       	mov	r22, r9
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0x178>
 ade:	6f ef       	ldi	r22, 0xFF	; 255
 ae0:	7f ef       	ldi	r23, 0xFF	; 255
 ae2:	c5 01       	movw	r24, r10
 ae4:	0e 94 96 06 	call	0xd2c	; 0xd2c <strnlen_P>
 ae8:	4c 01       	movw	r8, r24
 aea:	f3 2d       	mov	r31, r3
 aec:	f0 68       	ori	r31, 0x80	; 128
 aee:	3f 2e       	mov	r3, r31
 af0:	82 01       	movw	r16, r4
 af2:	33 fc       	sbrc	r3, 3
 af4:	1b c0       	rjmp	.+54     	; 0xb2c <vfprintf+0x1c2>
 af6:	82 2d       	mov	r24, r2
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	88 16       	cp	r8, r24
 afc:	99 06       	cpc	r9, r25
 afe:	b0 f4       	brcc	.+44     	; 0xb2c <vfprintf+0x1c2>
 b00:	b6 01       	movw	r22, r12
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 b0a:	2a 94       	dec	r2
 b0c:	f4 cf       	rjmp	.-24     	; 0xaf6 <vfprintf+0x18c>
 b0e:	f5 01       	movw	r30, r10
 b10:	37 fc       	sbrc	r3, 7
 b12:	85 91       	lpm	r24, Z+
 b14:	37 fe       	sbrs	r3, 7
 b16:	81 91       	ld	r24, Z+
 b18:	5f 01       	movw	r10, r30
 b1a:	b6 01       	movw	r22, r12
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 b22:	21 10       	cpse	r2, r1
 b24:	2a 94       	dec	r2
 b26:	21 e0       	ldi	r18, 0x01	; 1
 b28:	82 1a       	sub	r8, r18
 b2a:	91 08       	sbc	r9, r1
 b2c:	81 14       	cp	r8, r1
 b2e:	91 04       	cpc	r9, r1
 b30:	71 f7       	brne	.-36     	; 0xb0e <vfprintf+0x1a4>
 b32:	e8 c0       	rjmp	.+464    	; 0xd04 <vfprintf+0x39a>
 b34:	84 36       	cpi	r24, 0x64	; 100
 b36:	11 f0       	breq	.+4      	; 0xb3c <vfprintf+0x1d2>
 b38:	89 36       	cpi	r24, 0x69	; 105
 b3a:	41 f5       	brne	.+80     	; 0xb8c <vfprintf+0x222>
 b3c:	f8 01       	movw	r30, r16
 b3e:	37 fe       	sbrs	r3, 7
 b40:	07 c0       	rjmp	.+14     	; 0xb50 <vfprintf+0x1e6>
 b42:	60 81       	ld	r22, Z
 b44:	71 81       	ldd	r23, Z+1	; 0x01
 b46:	82 81       	ldd	r24, Z+2	; 0x02
 b48:	93 81       	ldd	r25, Z+3	; 0x03
 b4a:	0c 5f       	subi	r16, 0xFC	; 252
 b4c:	1f 4f       	sbci	r17, 0xFF	; 255
 b4e:	08 c0       	rjmp	.+16     	; 0xb60 <vfprintf+0x1f6>
 b50:	60 81       	ld	r22, Z
 b52:	71 81       	ldd	r23, Z+1	; 0x01
 b54:	07 2e       	mov	r0, r23
 b56:	00 0c       	add	r0, r0
 b58:	88 0b       	sbc	r24, r24
 b5a:	99 0b       	sbc	r25, r25
 b5c:	0e 5f       	subi	r16, 0xFE	; 254
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
 b60:	f3 2d       	mov	r31, r3
 b62:	ff 76       	andi	r31, 0x6F	; 111
 b64:	3f 2e       	mov	r3, r31
 b66:	97 ff       	sbrs	r25, 7
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <vfprintf+0x212>
 b6a:	90 95       	com	r25
 b6c:	80 95       	com	r24
 b6e:	70 95       	com	r23
 b70:	61 95       	neg	r22
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	f0 68       	ori	r31, 0x80	; 128
 b7a:	3f 2e       	mov	r3, r31
 b7c:	2a e0       	ldi	r18, 0x0A	; 10
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	a3 01       	movw	r20, r6
 b82:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__ultoa_invert>
 b86:	88 2e       	mov	r8, r24
 b88:	86 18       	sub	r8, r6
 b8a:	45 c0       	rjmp	.+138    	; 0xc16 <vfprintf+0x2ac>
 b8c:	85 37       	cpi	r24, 0x75	; 117
 b8e:	31 f4       	brne	.+12     	; 0xb9c <vfprintf+0x232>
 b90:	23 2d       	mov	r18, r3
 b92:	2f 7e       	andi	r18, 0xEF	; 239
 b94:	b2 2e       	mov	r11, r18
 b96:	2a e0       	ldi	r18, 0x0A	; 10
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	25 c0       	rjmp	.+74     	; 0xbe6 <vfprintf+0x27c>
 b9c:	93 2d       	mov	r25, r3
 b9e:	99 7f       	andi	r25, 0xF9	; 249
 ba0:	b9 2e       	mov	r11, r25
 ba2:	8f 36       	cpi	r24, 0x6F	; 111
 ba4:	c1 f0       	breq	.+48     	; 0xbd6 <vfprintf+0x26c>
 ba6:	18 f4       	brcc	.+6      	; 0xbae <vfprintf+0x244>
 ba8:	88 35       	cpi	r24, 0x58	; 88
 baa:	79 f0       	breq	.+30     	; 0xbca <vfprintf+0x260>
 bac:	b5 c0       	rjmp	.+362    	; 0xd18 <vfprintf+0x3ae>
 bae:	80 37       	cpi	r24, 0x70	; 112
 bb0:	19 f0       	breq	.+6      	; 0xbb8 <vfprintf+0x24e>
 bb2:	88 37       	cpi	r24, 0x78	; 120
 bb4:	21 f0       	breq	.+8      	; 0xbbe <vfprintf+0x254>
 bb6:	b0 c0       	rjmp	.+352    	; 0xd18 <vfprintf+0x3ae>
 bb8:	e9 2f       	mov	r30, r25
 bba:	e0 61       	ori	r30, 0x10	; 16
 bbc:	be 2e       	mov	r11, r30
 bbe:	b4 fe       	sbrs	r11, 4
 bc0:	0d c0       	rjmp	.+26     	; 0xbdc <vfprintf+0x272>
 bc2:	fb 2d       	mov	r31, r11
 bc4:	f4 60       	ori	r31, 0x04	; 4
 bc6:	bf 2e       	mov	r11, r31
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x272>
 bca:	34 fe       	sbrs	r3, 4
 bcc:	0a c0       	rjmp	.+20     	; 0xbe2 <vfprintf+0x278>
 bce:	29 2f       	mov	r18, r25
 bd0:	26 60       	ori	r18, 0x06	; 6
 bd2:	b2 2e       	mov	r11, r18
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0x278>
 bd6:	28 e0       	ldi	r18, 0x08	; 8
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	05 c0       	rjmp	.+10     	; 0xbe6 <vfprintf+0x27c>
 bdc:	20 e1       	ldi	r18, 0x10	; 16
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <vfprintf+0x27c>
 be2:	20 e1       	ldi	r18, 0x10	; 16
 be4:	32 e0       	ldi	r19, 0x02	; 2
 be6:	f8 01       	movw	r30, r16
 be8:	b7 fe       	sbrs	r11, 7
 bea:	07 c0       	rjmp	.+14     	; 0xbfa <vfprintf+0x290>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	82 81       	ldd	r24, Z+2	; 0x02
 bf2:	93 81       	ldd	r25, Z+3	; 0x03
 bf4:	0c 5f       	subi	r16, 0xFC	; 252
 bf6:	1f 4f       	sbci	r17, 0xFF	; 255
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <vfprintf+0x29c>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 5f       	subi	r16, 0xFE	; 254
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	a3 01       	movw	r20, r6
 c08:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__ultoa_invert>
 c0c:	88 2e       	mov	r8, r24
 c0e:	86 18       	sub	r8, r6
 c10:	fb 2d       	mov	r31, r11
 c12:	ff 77       	andi	r31, 0x7F	; 127
 c14:	3f 2e       	mov	r3, r31
 c16:	36 fe       	sbrs	r3, 6
 c18:	0d c0       	rjmp	.+26     	; 0xc34 <vfprintf+0x2ca>
 c1a:	23 2d       	mov	r18, r3
 c1c:	2e 7f       	andi	r18, 0xFE	; 254
 c1e:	a2 2e       	mov	r10, r18
 c20:	89 14       	cp	r8, r9
 c22:	58 f4       	brcc	.+22     	; 0xc3a <vfprintf+0x2d0>
 c24:	34 fe       	sbrs	r3, 4
 c26:	0b c0       	rjmp	.+22     	; 0xc3e <vfprintf+0x2d4>
 c28:	32 fc       	sbrc	r3, 2
 c2a:	09 c0       	rjmp	.+18     	; 0xc3e <vfprintf+0x2d4>
 c2c:	83 2d       	mov	r24, r3
 c2e:	8e 7e       	andi	r24, 0xEE	; 238
 c30:	a8 2e       	mov	r10, r24
 c32:	05 c0       	rjmp	.+10     	; 0xc3e <vfprintf+0x2d4>
 c34:	b8 2c       	mov	r11, r8
 c36:	a3 2c       	mov	r10, r3
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <vfprintf+0x2d6>
 c3a:	b8 2c       	mov	r11, r8
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <vfprintf+0x2d6>
 c3e:	b9 2c       	mov	r11, r9
 c40:	a4 fe       	sbrs	r10, 4
 c42:	0f c0       	rjmp	.+30     	; 0xc62 <vfprintf+0x2f8>
 c44:	fe 01       	movw	r30, r28
 c46:	e8 0d       	add	r30, r8
 c48:	f1 1d       	adc	r31, r1
 c4a:	80 81       	ld	r24, Z
 c4c:	80 33       	cpi	r24, 0x30	; 48
 c4e:	21 f4       	brne	.+8      	; 0xc58 <vfprintf+0x2ee>
 c50:	9a 2d       	mov	r25, r10
 c52:	99 7e       	andi	r25, 0xE9	; 233
 c54:	a9 2e       	mov	r10, r25
 c56:	09 c0       	rjmp	.+18     	; 0xc6a <vfprintf+0x300>
 c58:	a2 fe       	sbrs	r10, 2
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x2fe>
 c5c:	b3 94       	inc	r11
 c5e:	b3 94       	inc	r11
 c60:	04 c0       	rjmp	.+8      	; 0xc6a <vfprintf+0x300>
 c62:	8a 2d       	mov	r24, r10
 c64:	86 78       	andi	r24, 0x86	; 134
 c66:	09 f0       	breq	.+2      	; 0xc6a <vfprintf+0x300>
 c68:	b3 94       	inc	r11
 c6a:	a3 fc       	sbrc	r10, 3
 c6c:	11 c0       	rjmp	.+34     	; 0xc90 <vfprintf+0x326>
 c6e:	a0 fe       	sbrs	r10, 0
 c70:	06 c0       	rjmp	.+12     	; 0xc7e <vfprintf+0x314>
 c72:	b2 14       	cp	r11, r2
 c74:	88 f4       	brcc	.+34     	; 0xc98 <vfprintf+0x32e>
 c76:	28 0c       	add	r2, r8
 c78:	92 2c       	mov	r9, r2
 c7a:	9b 18       	sub	r9, r11
 c7c:	0e c0       	rjmp	.+28     	; 0xc9a <vfprintf+0x330>
 c7e:	b2 14       	cp	r11, r2
 c80:	60 f4       	brcc	.+24     	; 0xc9a <vfprintf+0x330>
 c82:	b6 01       	movw	r22, r12
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 c8c:	b3 94       	inc	r11
 c8e:	f7 cf       	rjmp	.-18     	; 0xc7e <vfprintf+0x314>
 c90:	b2 14       	cp	r11, r2
 c92:	18 f4       	brcc	.+6      	; 0xc9a <vfprintf+0x330>
 c94:	2b 18       	sub	r2, r11
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x332>
 c98:	98 2c       	mov	r9, r8
 c9a:	21 2c       	mov	r2, r1
 c9c:	a4 fe       	sbrs	r10, 4
 c9e:	10 c0       	rjmp	.+32     	; 0xcc0 <vfprintf+0x356>
 ca0:	b6 01       	movw	r22, r12
 ca2:	80 e3       	ldi	r24, 0x30	; 48
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 caa:	a2 fe       	sbrs	r10, 2
 cac:	17 c0       	rjmp	.+46     	; 0xcdc <vfprintf+0x372>
 cae:	a1 fc       	sbrc	r10, 1
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x34e>
 cb2:	88 e7       	ldi	r24, 0x78	; 120
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x352>
 cb8:	88 e5       	ldi	r24, 0x58	; 88
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	b6 01       	movw	r22, r12
 cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <vfprintf+0x36e>
 cc0:	8a 2d       	mov	r24, r10
 cc2:	86 78       	andi	r24, 0x86	; 134
 cc4:	59 f0       	breq	.+22     	; 0xcdc <vfprintf+0x372>
 cc6:	a1 fe       	sbrs	r10, 1
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x364>
 cca:	8b e2       	ldi	r24, 0x2B	; 43
 ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <vfprintf+0x366>
 cce:	80 e2       	ldi	r24, 0x20	; 32
 cd0:	a7 fc       	sbrc	r10, 7
 cd2:	8d e2       	ldi	r24, 0x2D	; 45
 cd4:	b6 01       	movw	r22, r12
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 cdc:	89 14       	cp	r8, r9
 cde:	38 f4       	brcc	.+14     	; 0xcee <vfprintf+0x384>
 ce0:	b6 01       	movw	r22, r12
 ce2:	80 e3       	ldi	r24, 0x30	; 48
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 cea:	9a 94       	dec	r9
 cec:	f7 cf       	rjmp	.-18     	; 0xcdc <vfprintf+0x372>
 cee:	8a 94       	dec	r8
 cf0:	f3 01       	movw	r30, r6
 cf2:	e8 0d       	add	r30, r8
 cf4:	f1 1d       	adc	r31, r1
 cf6:	80 81       	ld	r24, Z
 cf8:	b6 01       	movw	r22, r12
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 d00:	81 10       	cpse	r8, r1
 d02:	f5 cf       	rjmp	.-22     	; 0xcee <vfprintf+0x384>
 d04:	22 20       	and	r2, r2
 d06:	09 f4       	brne	.+2      	; 0xd0a <vfprintf+0x3a0>
 d08:	42 ce       	rjmp	.-892    	; 0x98e <vfprintf+0x24>
 d0a:	b6 01       	movw	r22, r12
 d0c:	80 e2       	ldi	r24, 0x20	; 32
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 ac 06 	call	0xd58	; 0xd58 <fputc>
 d14:	2a 94       	dec	r2
 d16:	f6 cf       	rjmp	.-20     	; 0xd04 <vfprintf+0x39a>
 d18:	f6 01       	movw	r30, r12
 d1a:	86 81       	ldd	r24, Z+6	; 0x06
 d1c:	97 81       	ldd	r25, Z+7	; 0x07
 d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x3ba>
 d20:	8f ef       	ldi	r24, 0xFF	; 255
 d22:	9f ef       	ldi	r25, 0xFF	; 255
 d24:	2b 96       	adiw	r28, 0x0b	; 11
 d26:	e2 e1       	ldi	r30, 0x12	; 18
 d28:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__epilogue_restores__>

00000d2c <strnlen_P>:
 d2c:	fc 01       	movw	r30, r24
 d2e:	05 90       	lpm	r0, Z+
 d30:	61 50       	subi	r22, 0x01	; 1
 d32:	70 40       	sbci	r23, 0x00	; 0
 d34:	01 10       	cpse	r0, r1
 d36:	d8 f7       	brcc	.-10     	; 0xd2e <strnlen_P+0x2>
 d38:	80 95       	com	r24
 d3a:	90 95       	com	r25
 d3c:	8e 0f       	add	r24, r30
 d3e:	9f 1f       	adc	r25, r31
 d40:	08 95       	ret

00000d42 <strnlen>:
 d42:	fc 01       	movw	r30, r24
 d44:	61 50       	subi	r22, 0x01	; 1
 d46:	70 40       	sbci	r23, 0x00	; 0
 d48:	01 90       	ld	r0, Z+
 d4a:	01 10       	cpse	r0, r1
 d4c:	d8 f7       	brcc	.-10     	; 0xd44 <strnlen+0x2>
 d4e:	80 95       	com	r24
 d50:	90 95       	com	r25
 d52:	8e 0f       	add	r24, r30
 d54:	9f 1f       	adc	r25, r31
 d56:	08 95       	ret

00000d58 <fputc>:
 d58:	0f 93       	push	r16
 d5a:	1f 93       	push	r17
 d5c:	cf 93       	push	r28
 d5e:	df 93       	push	r29
 d60:	fb 01       	movw	r30, r22
 d62:	23 81       	ldd	r18, Z+3	; 0x03
 d64:	21 fd       	sbrc	r18, 1
 d66:	03 c0       	rjmp	.+6      	; 0xd6e <fputc+0x16>
 d68:	8f ef       	ldi	r24, 0xFF	; 255
 d6a:	9f ef       	ldi	r25, 0xFF	; 255
 d6c:	2c c0       	rjmp	.+88     	; 0xdc6 <fputc+0x6e>
 d6e:	22 ff       	sbrs	r18, 2
 d70:	16 c0       	rjmp	.+44     	; 0xd9e <fputc+0x46>
 d72:	46 81       	ldd	r20, Z+6	; 0x06
 d74:	57 81       	ldd	r21, Z+7	; 0x07
 d76:	24 81       	ldd	r18, Z+4	; 0x04
 d78:	35 81       	ldd	r19, Z+5	; 0x05
 d7a:	42 17       	cp	r20, r18
 d7c:	53 07       	cpc	r21, r19
 d7e:	44 f4       	brge	.+16     	; 0xd90 <fputc+0x38>
 d80:	a0 81       	ld	r26, Z
 d82:	b1 81       	ldd	r27, Z+1	; 0x01
 d84:	9d 01       	movw	r18, r26
 d86:	2f 5f       	subi	r18, 0xFF	; 255
 d88:	3f 4f       	sbci	r19, 0xFF	; 255
 d8a:	31 83       	std	Z+1, r19	; 0x01
 d8c:	20 83       	st	Z, r18
 d8e:	8c 93       	st	X, r24
 d90:	26 81       	ldd	r18, Z+6	; 0x06
 d92:	37 81       	ldd	r19, Z+7	; 0x07
 d94:	2f 5f       	subi	r18, 0xFF	; 255
 d96:	3f 4f       	sbci	r19, 0xFF	; 255
 d98:	37 83       	std	Z+7, r19	; 0x07
 d9a:	26 83       	std	Z+6, r18	; 0x06
 d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <fputc+0x6e>
 d9e:	8b 01       	movw	r16, r22
 da0:	ec 01       	movw	r28, r24
 da2:	fb 01       	movw	r30, r22
 da4:	00 84       	ldd	r0, Z+8	; 0x08
 da6:	f1 85       	ldd	r31, Z+9	; 0x09
 da8:	e0 2d       	mov	r30, r0
 daa:	09 95       	icall
 dac:	89 2b       	or	r24, r25
 dae:	e1 f6       	brne	.-72     	; 0xd68 <fputc+0x10>
 db0:	d8 01       	movw	r26, r16
 db2:	16 96       	adiw	r26, 0x06	; 6
 db4:	8d 91       	ld	r24, X+
 db6:	9c 91       	ld	r25, X
 db8:	17 97       	sbiw	r26, 0x07	; 7
 dba:	01 96       	adiw	r24, 0x01	; 1
 dbc:	17 96       	adiw	r26, 0x07	; 7
 dbe:	9c 93       	st	X, r25
 dc0:	8e 93       	st	-X, r24
 dc2:	16 97       	sbiw	r26, 0x06	; 6
 dc4:	ce 01       	movw	r24, r28
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	1f 91       	pop	r17
 dcc:	0f 91       	pop	r16
 dce:	08 95       	ret

00000dd0 <__ultoa_invert>:
 dd0:	fa 01       	movw	r30, r20
 dd2:	aa 27       	eor	r26, r26
 dd4:	28 30       	cpi	r18, 0x08	; 8
 dd6:	51 f1       	breq	.+84     	; 0xe2c <__ultoa_invert+0x5c>
 dd8:	20 31       	cpi	r18, 0x10	; 16
 dda:	81 f1       	breq	.+96     	; 0xe3c <__ultoa_invert+0x6c>
 ddc:	e8 94       	clt
 dde:	6f 93       	push	r22
 de0:	6e 7f       	andi	r22, 0xFE	; 254
 de2:	6e 5f       	subi	r22, 0xFE	; 254
 de4:	7f 4f       	sbci	r23, 0xFF	; 255
 de6:	8f 4f       	sbci	r24, 0xFF	; 255
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	af 4f       	sbci	r26, 0xFF	; 255
 dec:	b1 e0       	ldi	r27, 0x01	; 1
 dee:	3e d0       	rcall	.+124    	; 0xe6c <__ultoa_invert+0x9c>
 df0:	b4 e0       	ldi	r27, 0x04	; 4
 df2:	3c d0       	rcall	.+120    	; 0xe6c <__ultoa_invert+0x9c>
 df4:	67 0f       	add	r22, r23
 df6:	78 1f       	adc	r23, r24
 df8:	89 1f       	adc	r24, r25
 dfa:	9a 1f       	adc	r25, r26
 dfc:	a1 1d       	adc	r26, r1
 dfe:	68 0f       	add	r22, r24
 e00:	79 1f       	adc	r23, r25
 e02:	8a 1f       	adc	r24, r26
 e04:	91 1d       	adc	r25, r1
 e06:	a1 1d       	adc	r26, r1
 e08:	6a 0f       	add	r22, r26
 e0a:	71 1d       	adc	r23, r1
 e0c:	81 1d       	adc	r24, r1
 e0e:	91 1d       	adc	r25, r1
 e10:	a1 1d       	adc	r26, r1
 e12:	20 d0       	rcall	.+64     	; 0xe54 <__ultoa_invert+0x84>
 e14:	09 f4       	brne	.+2      	; 0xe18 <__ultoa_invert+0x48>
 e16:	68 94       	set
 e18:	3f 91       	pop	r19
 e1a:	2a e0       	ldi	r18, 0x0A	; 10
 e1c:	26 9f       	mul	r18, r22
 e1e:	11 24       	eor	r1, r1
 e20:	30 19       	sub	r19, r0
 e22:	30 5d       	subi	r19, 0xD0	; 208
 e24:	31 93       	st	Z+, r19
 e26:	de f6       	brtc	.-74     	; 0xdde <__ultoa_invert+0xe>
 e28:	cf 01       	movw	r24, r30
 e2a:	08 95       	ret
 e2c:	46 2f       	mov	r20, r22
 e2e:	47 70       	andi	r20, 0x07	; 7
 e30:	40 5d       	subi	r20, 0xD0	; 208
 e32:	41 93       	st	Z+, r20
 e34:	b3 e0       	ldi	r27, 0x03	; 3
 e36:	0f d0       	rcall	.+30     	; 0xe56 <__ultoa_invert+0x86>
 e38:	c9 f7       	brne	.-14     	; 0xe2c <__ultoa_invert+0x5c>
 e3a:	f6 cf       	rjmp	.-20     	; 0xe28 <__ultoa_invert+0x58>
 e3c:	46 2f       	mov	r20, r22
 e3e:	4f 70       	andi	r20, 0x0F	; 15
 e40:	40 5d       	subi	r20, 0xD0	; 208
 e42:	4a 33       	cpi	r20, 0x3A	; 58
 e44:	18 f0       	brcs	.+6      	; 0xe4c <__ultoa_invert+0x7c>
 e46:	49 5d       	subi	r20, 0xD9	; 217
 e48:	31 fd       	sbrc	r19, 1
 e4a:	40 52       	subi	r20, 0x20	; 32
 e4c:	41 93       	st	Z+, r20
 e4e:	02 d0       	rcall	.+4      	; 0xe54 <__ultoa_invert+0x84>
 e50:	a9 f7       	brne	.-22     	; 0xe3c <__ultoa_invert+0x6c>
 e52:	ea cf       	rjmp	.-44     	; 0xe28 <__ultoa_invert+0x58>
 e54:	b4 e0       	ldi	r27, 0x04	; 4
 e56:	a6 95       	lsr	r26
 e58:	97 95       	ror	r25
 e5a:	87 95       	ror	r24
 e5c:	77 95       	ror	r23
 e5e:	67 95       	ror	r22
 e60:	ba 95       	dec	r27
 e62:	c9 f7       	brne	.-14     	; 0xe56 <__ultoa_invert+0x86>
 e64:	00 97       	sbiw	r24, 0x00	; 0
 e66:	61 05       	cpc	r22, r1
 e68:	71 05       	cpc	r23, r1
 e6a:	08 95       	ret
 e6c:	9b 01       	movw	r18, r22
 e6e:	ac 01       	movw	r20, r24
 e70:	0a 2e       	mov	r0, r26
 e72:	06 94       	lsr	r0
 e74:	57 95       	ror	r21
 e76:	47 95       	ror	r20
 e78:	37 95       	ror	r19
 e7a:	27 95       	ror	r18
 e7c:	ba 95       	dec	r27
 e7e:	c9 f7       	brne	.-14     	; 0xe72 <__ultoa_invert+0xa2>
 e80:	62 0f       	add	r22, r18
 e82:	73 1f       	adc	r23, r19
 e84:	84 1f       	adc	r24, r20
 e86:	95 1f       	adc	r25, r21
 e88:	a0 1d       	adc	r26, r0
 e8a:	08 95       	ret

00000e8c <__prologue_saves__>:
 e8c:	2f 92       	push	r2
 e8e:	3f 92       	push	r3
 e90:	4f 92       	push	r4
 e92:	5f 92       	push	r5
 e94:	6f 92       	push	r6
 e96:	7f 92       	push	r7
 e98:	8f 92       	push	r8
 e9a:	9f 92       	push	r9
 e9c:	af 92       	push	r10
 e9e:	bf 92       	push	r11
 ea0:	cf 92       	push	r12
 ea2:	df 92       	push	r13
 ea4:	ef 92       	push	r14
 ea6:	ff 92       	push	r15
 ea8:	0f 93       	push	r16
 eaa:	1f 93       	push	r17
 eac:	cf 93       	push	r28
 eae:	df 93       	push	r29
 eb0:	cd b7       	in	r28, 0x3d	; 61
 eb2:	de b7       	in	r29, 0x3e	; 62
 eb4:	ca 1b       	sub	r28, r26
 eb6:	db 0b       	sbc	r29, r27
 eb8:	0f b6       	in	r0, 0x3f	; 63
 eba:	f8 94       	cli
 ebc:	de bf       	out	0x3e, r29	; 62
 ebe:	0f be       	out	0x3f, r0	; 63
 ec0:	cd bf       	out	0x3d, r28	; 61
 ec2:	09 94       	ijmp

00000ec4 <__epilogue_restores__>:
 ec4:	2a 88       	ldd	r2, Y+18	; 0x12
 ec6:	39 88       	ldd	r3, Y+17	; 0x11
 ec8:	48 88       	ldd	r4, Y+16	; 0x10
 eca:	5f 84       	ldd	r5, Y+15	; 0x0f
 ecc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ece:	7d 84       	ldd	r7, Y+13	; 0x0d
 ed0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ed6:	b9 84       	ldd	r11, Y+9	; 0x09
 ed8:	c8 84       	ldd	r12, Y+8	; 0x08
 eda:	df 80       	ldd	r13, Y+7	; 0x07
 edc:	ee 80       	ldd	r14, Y+6	; 0x06
 ede:	fd 80       	ldd	r15, Y+5	; 0x05
 ee0:	0c 81       	ldd	r16, Y+4	; 0x04
 ee2:	1b 81       	ldd	r17, Y+3	; 0x03
 ee4:	aa 81       	ldd	r26, Y+2	; 0x02
 ee6:	b9 81       	ldd	r27, Y+1	; 0x01
 ee8:	ce 0f       	add	r28, r30
 eea:	d1 1d       	adc	r29, r1
 eec:	0f b6       	in	r0, 0x3f	; 63
 eee:	f8 94       	cli
 ef0:	de bf       	out	0x3e, r29	; 62
 ef2:	0f be       	out	0x3f, r0	; 63
 ef4:	cd bf       	out	0x3d, r28	; 61
 ef6:	ed 01       	movw	r28, r26
 ef8:	08 95       	ret

00000efa <_exit>:
 efa:	f8 94       	cli

00000efc <__stop_program>:
 efc:	ff cf       	rjmp	.-2      	; 0xefc <__stop_program>
